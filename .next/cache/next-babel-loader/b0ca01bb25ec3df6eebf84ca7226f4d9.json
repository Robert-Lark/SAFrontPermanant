{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from \"react\";\nexport default function useForm(initialState = {}) {\n  //create a state object for the inputs\n  const {\n    0: inputs,\n    1: setInputs\n  } = useState(initialState);\n  const {\n    value,\n    name,\n    type\n  } = e.target;\n\n  function handleChange(e) {\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, {\n      //update the specific piece of state\n      [e.target.name]: e.target.value\n    }));\n  } //return the data we want to surface from this custom hook\n\n\n  return {\n    inputs,\n    handleChange\n  };\n}","map":{"version":3,"sources":["/Users/robertlark/SonicArchitecture/Advanced-React/sick-fits/frontend/lib/useForm.js"],"names":["useState","useForm","initialState","inputs","setInputs","value","name","type","e","target","handleChange"],"mappings":";;;;;;AAAA,SAAQA,QAAR,QAAuB,OAAvB;AAEA,eAAe,SAASC,OAAT,CAAiBC,YAAY,GAAG,EAAhC,EAAoC;AACjD;AACA,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBJ,QAAQ,CAACE,YAAD,CAApC;AACF,QAAM;AAACG,IAAAA,KAAD;AAAQC,IAAAA,IAAR;AAAcC,IAAAA;AAAd,MAAsBC,CAAC,CAACC,MAA9B;;AACE,WAASC,YAAT,CAAsBF,CAAtB,EAAyB;AACvBJ,IAAAA,SAAS,iCAEJD,MAFI;AAGP;AACA,OAACK,CAAC,CAACC,MAAF,CAASH,IAAV,GAAiBE,CAAC,CAACC,MAAF,CAASJ;AAJnB,OAAT;AAMD,GAXgD,CAYjD;;;AACA,SAAO;AACLF,IAAAA,MADK;AAELO,IAAAA;AAFK,GAAP;AAID","sourcesContent":["import {useState} from \"react\";\n\nexport default function useForm(initialState = {}) {\n  //create a state object for the inputs\n  const [inputs, setInputs] = useState(initialState);\nconst {value, name, type} = e.target;\n  function handleChange(e) {\n    setInputs({\n      //copy the existing state\n      ...inputs,\n      //update the specific piece of state\n      [e.target.name]: e.target.value,\n    });\n  }\n  //return the data we want to surface from this custom hook\n  return {\n    inputs,\n    handleChange,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}