{"ast":null,"code":"import { PAGINATION_QUERY } from \"../components/Pagination\";\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n\n    //tells Apollo we will take care of everything\n    read(existing = [], {\n      args,\n      cache\n    }) {\n      var _data$_allProductsMet;\n\n      const {\n        skip,\n        first\n      } = args; //read the number of items on the page from the cache\n\n      const data = cache.readQuery({\n        query: PAGINATION_QUERY\n      }); //how many products are there?\n\n      const count = (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count; //what page are we on?\n\n      const page = skip / first + 1; //how many pages are there?\n\n      const pages = Math.ceil(count / first); //check if we have existing items\n      //filter out for undefined items\n\n      const items = existing.slice(skip, skip + first).filter(x => x);\n\n      if (items.length !== first) {\n        //we dont have any items and must go to the network to fetch them\n        return false;\n      } //if there are items return them from the cache\n\n\n      if (items.length) {\n        return items;\n      }\n\n      return false; // flaaback to network if either if stateme\n    },\n\n    merge() {//This runs when Apollo client comes back from the network with our products\n      // you can then define how they are added to the cache\n    }\n\n  };\n}","map":{"version":3,"sources":["/Users/robertlark/SonicArchitecture/Advanced-React/sick-fits/frontend/lib/paginationFields.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","skip","first","data","readQuery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","filter","x","length","merge"],"mappings":"AAAA,SAAQA,gBAAR,QAA+B,0BAA/B;AAEA,eAAe,SAASC,eAAT,GAA2B;AACxC,SAAO;AACLC,IAAAA,OAAO,EAAE,KADJ;;AACW;AAEhBC,IAAAA,IAAI,CAACC,QAAQ,GAAG,EAAZ,EAAgB;AAACC,MAAAA,IAAD;AAAOC,MAAAA;AAAP,KAAhB,EAA+B;AAAA;;AACjC,YAAM;AAACC,QAAAA,IAAD;AAAOC,QAAAA;AAAP,UAAgBH,IAAtB,CADiC,CAGjC;;AACA,YAAMI,IAAI,GAAGH,KAAK,CAACI,SAAN,CAAgB;AAACC,QAAAA,KAAK,EAAEX;AAAR,OAAhB,CAAb,CAJiC,CAKjC;;AACA,YAAMY,KAAK,4BAAGH,IAAI,CAACI,gBAAR,0DAAG,sBAAuBD,KAArC,CANiC,CAOjC;;AACA,YAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAc,CAA3B,CARiC,CASjC;;AACA,YAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd,CAViC,CAYjC;AACN;;AACM,YAAMU,KAAK,GAAGd,QAAQ,CAACe,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA0CC,CAAC,IAAIA,CAA/C,CAAd;;AACA,UAAGH,KAAK,CAACI,MAAN,KAAiBd,KAApB,EAA2B;AACvB;AACA,eAAO,KAAP;AACH,OAlBgC,CAmBnC;;;AACA,UAAGU,KAAK,CAACI,MAAT,EAAiB;AACb,eAAOJ,KAAP;AACH;;AACD,aAAO,KAAP,CAvBmC,CAuBtB;AACZ,KA3BI;;AA4BLK,IAAAA,KAAK,GAAG,CACN;AACA;AACD;;AA/BI,GAAP;AAiCD","sourcesContent":["import {PAGINATION_QUERY} from \"../components/Pagination\";\n\nexport default function paginationField() {\n  return {\n    keyArgs: false, //tells Apollo we will take care of everything\n\n    read(existing = [], {args, cache}) {\n      const {skip, first} = args;\n\n      //read the number of items on the page from the cache\n      const data = cache.readQuery({query: PAGINATION_QUERY});\n      //how many products are there?\n      const count = data._allProductsMeta?.count;\n      //what page are we on?\n      const page = skip / first +1;\n      //how many pages are there?\n      const pages = Math.ceil(count / first)\n\n      //check if we have existing items\n//filter out for undefined items\n      const items = existing.slice(skip, skip + first).filter(x => x);\n      if(items.length !== first) {\n          //we dont have any items and must go to the network to fetch them\n          return false;\n      }\n    //if there are items return them from the cache\n    if(items.length) {\n        return items\n    }\n    return false // flaaback to network if either if stateme\n    },\n    merge() {\n      //This runs when Apollo client comes back from the network with our products\n      // you can then define how they are added to the cache\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}