{"ast":null,"code":"import { PAGINATION_QUERY } from \"../components/Pagination\";\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n    //tells Apollo we will take care of everything\n    read: function read() {\n      var _data$_allProductsMet;\n\n      var existing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var _ref = arguments.length > 1 ? arguments[1] : undefined,\n          args = _ref.args,\n          cache = _ref.cache;\n\n      var skip = args.skip,\n          first = args.first; //read the number of items on the page from the cache\n\n      var data = cache.readQuery({\n        query: PAGINATION_QUERY\n      }); //how many products are there?\n\n      var count = (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count; //what page are we on?\n\n      var page = skip / first + 1; //how many pages are there?\n\n      var pages = Math.ceil(count / first); //check if we have existing items\n\n      var items = existing.slice(skip, skip);\n    },\n    merge: function merge() {//This runs when Apollo client comes back from the network with our products\n      // you can then define how they are added to the cache\n    }\n  };\n}","map":{"version":3,"sources":["/Users/robertlark/SonicArchitecture/Advanced-React/sick-fits/frontend/lib/paginationFields.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","skip","first","data","readQuery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","merge"],"mappings":"AAAA,SAAQA,gBAAR,QAA+B,0BAA/B;AAEA,eAAe,SAASC,eAAT,GAA2B;AACxC,SAAO;AACLC,IAAAA,OAAO,EAAE,KADJ;AACW;AAEhBC,IAAAA,IAHK,kBAG8B;AAAA;;AAAA,UAA9BC,QAA8B,uEAAnB,EAAmB;;AAAA;AAAA,UAAdC,IAAc,QAAdA,IAAc;AAAA,UAARC,KAAQ,QAARA,KAAQ;;AAAA,UAC1BC,IAD0B,GACXF,IADW,CAC1BE,IAD0B;AAAA,UACpBC,KADoB,GACXH,IADW,CACpBG,KADoB,EAGjC;;AACA,UAAMC,IAAI,GAAGH,KAAK,CAACI,SAAN,CAAgB;AAACC,QAAAA,KAAK,EAAEX;AAAR,OAAhB,CAAb,CAJiC,CAKjC;;AACA,UAAMY,KAAK,4BAAGH,IAAI,CAACI,gBAAR,0DAAG,sBAAuBD,KAArC,CANiC,CAOjC;;AACA,UAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAc,CAA3B,CARiC,CASjC;;AACA,UAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd,CAViC,CAYjC;;AAEA,UAAMU,KAAK,GAAGd,QAAQ,CAACe,KAAT,CAAeZ,IAAf,EAAqBA,IAArB,CAAd;AACD,KAlBI;AAmBLa,IAAAA,KAnBK,mBAmBG,CACN;AACA;AACD;AAtBI,GAAP;AAwBD","sourcesContent":["import {PAGINATION_QUERY} from \"../components/Pagination\";\n\nexport default function paginationField() {\n  return {\n    keyArgs: false, //tells Apollo we will take care of everything\n\n    read(existing = [], {args, cache}) {\n      const {skip, first} = args;\n\n      //read the number of items on the page from the cache\n      const data = cache.readQuery({query: PAGINATION_QUERY});\n      //how many products are there?\n      const count = data._allProductsMeta?.count;\n      //what page are we on?\n      const page = skip / first +1;\n      //how many pages are there?\n      const pages = Math.ceil(count / first)\n\n      //check if we have existing items\n\n      const items = existing.slice(skip, skip)\n    },\n    merge() {\n      //This runs when Apollo client comes back from the network with our products\n      // you can then define how they are added to the cache\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}