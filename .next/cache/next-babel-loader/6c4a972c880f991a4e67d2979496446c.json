{"ast":null,"code":"import _defineProperty from \"/Users/robertlark/SonicArchitecture/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _readOnlyError from \"/Users/robertlark/SonicArchitecture/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/readOnlyError\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from \"react\";\nexport default function useForm() {\n  _s();\n\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  //create a state object for the inputs\n  var _useState = useState(initialState),\n      inputs = _useState[0],\n      setInputs = _useState[1];\n\n  function handleChange(e) {\n    var _e$target = e.target,\n        value = _e$target.value,\n        name = _e$target.name,\n        type = _e$target.type;\n\n    if (type === 'number') {\n      value = (_readOnlyError(\"value\"), parseInt(value));\n    }\n\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, _defineProperty({}, name, value)));\n  } //return the data we want to surface from this custom hook\n\n\n  return {\n    inputs: inputs,\n    handleChange: handleChange\n  };\n}\n\n_s(useForm, \"Lv6RJ/mHpnMUo6xaiYRWB4w93So=\");","map":{"version":3,"sources":["/Users/robertlark/SonicArchitecture/Advanced-React/sick-fits/frontend/lib/useForm.js"],"names":["useState","useForm","initialState","inputs","setInputs","handleChange","e","target","value","name","type","parseInt"],"mappings":";;;;;;;;;AAAA,SAAQA,QAAR,QAAuB,OAAvB;AAEA,eAAe,SAASC,OAAT,GAAoC;AAAA;;AAAA,MAAnBC,YAAmB,uEAAJ,EAAI;;AACjD;AADiD,kBAErBF,QAAQ,CAACE,YAAD,CAFa;AAAA,MAE1CC,MAF0C;AAAA,MAElCC,SAFkC;;AAIjD,WAASC,YAAT,CAAsBC,CAAtB,EAAyB;AAAA,oBACKA,CAAC,CAACC,MADP;AAAA,QAChBC,KADgB,aAChBA,KADgB;AAAA,QACTC,IADS,aACTA,IADS;AAAA,QACHC,IADG,aACHA,IADG;;AAEvB,QAAGA,IAAI,KAAK,QAAZ,EAAsB;AAClBF,MAAAA,KAAK,6BAAGG,QAAQ,CAACH,KAAD,CAAX,CAAL;AACH;;AACDJ,IAAAA,SAAS,iCAEJD,MAFI,2BAINM,IAJM,EAICD,KAJD,GAAT;AAMD,GAfgD,CAgBjD;;;AACA,SAAO;AACLL,IAAAA,MAAM,EAANA,MADK;AAELE,IAAAA,YAAY,EAAZA;AAFK,GAAP;AAID;;GArBuBJ,O","sourcesContent":["import {useState} from \"react\";\n\nexport default function useForm(initialState = {}) {\n  //create a state object for the inputs\n  const [inputs, setInputs] = useState(initialState);\n\n  function handleChange(e) {\n    const {value, name, type} = e.target;\n    if(type === 'number') {\n        value = parseInt(value)\n    }\n    setInputs({\n      //copy the existing state\n      ...inputs,\n      //update the specific piece of state\n      [name]: value,\n    });\n  }\n  //return the data we want to surface from this custom hook\n  return {\n    inputs,\n    handleChange,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}