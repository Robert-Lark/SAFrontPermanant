{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/robertlark/SonicArchitecture/frontend/lib/cartState.js\";\nimport { createContext } from \"react\";\nimport { useContext } from \"react\";\nconst LocalStateContext = /*#__PURE__*/createContext();\nconst LocalStateProvider = LocalStateContext.Provider;\n\nfunction CartStateProvider({\n  children\n}) {\n  //this is the custom provider where data (state) is stored as well as functionality (updaters)\n  // it can be accessed using the consumer\n  const cartOpen = false;\n  return /*#__PURE__*/_jsxDEV(LocalStateProvider, {\n    value: {\n      cartOpen\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 10\n  }, this);\n} //this is the custom hook for accessing the cart's local state\n\n\nfunction useCart() {\n  // we use a consumer here to access the local state\n  const all = useContext(LocalStateContext);\n  return all;\n}\n\nexport { CartStateProvider, useCart };","map":{"version":3,"sources":["/Users/robertlark/SonicArchitecture/frontend/lib/cartState.js"],"names":["createContext","useContext","LocalStateContext","LocalStateProvider","Provider","CartStateProvider","children","cartOpen","useCart","all"],"mappings":";;AAAA,SAAQA,aAAR,QAA4B,OAA5B;AACA,SAASC,UAAT,QAA2B,OAA3B;AAEA,MAAMC,iBAAiB,gBAAGF,aAAa,EAAvC;AACA,MAAMG,kBAAkB,GAAGD,iBAAiB,CAACE,QAA7C;;AAEA,SAASC,iBAAT,CAA2B;AAACC,EAAAA;AAAD,CAA3B,EAAuC;AACrC;AACA;AAEA,QAAMC,QAAQ,GAAG,KAAjB;AAEA,sBAAO,QAAC,kBAAD;AAAoB,IAAA,KAAK,EAAE;AAACA,MAAAA;AAAD,KAA3B;AAAA,cAAwCD;AAAxC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,C,CAGD;;;AAEA,SAASE,OAAT,GAAmB;AACf;AACA,QAAMC,GAAG,GAAGR,UAAU,CAACC,iBAAD,CAAtB;AACA,SAAOO,GAAP;AACH;;AACD,SAAQJ,iBAAR,EAA2BG,OAA3B","sourcesContent":["import {createContext} from \"react\";\nimport { useContext } from \"react\";\n\nconst LocalStateContext = createContext();\nconst LocalStateProvider = LocalStateContext.Provider;\n\nfunction CartStateProvider({children}) {\n  //this is the custom provider where data (state) is stored as well as functionality (updaters)\n  // it can be accessed using the consumer\n\n  const cartOpen = false;\n\n  return <LocalStateProvider value={{cartOpen}}>{children}</LocalStateProvider>;\n}\n\n\n//this is the custom hook for accessing the cart's local state\n\nfunction useCart() {\n    // we use a consumer here to access the local state\n    const all = useContext(LocalStateContext);\n    return all\n}\nexport {CartStateProvider, useCart};\n"]},"metadata":{},"sourceType":"module"}