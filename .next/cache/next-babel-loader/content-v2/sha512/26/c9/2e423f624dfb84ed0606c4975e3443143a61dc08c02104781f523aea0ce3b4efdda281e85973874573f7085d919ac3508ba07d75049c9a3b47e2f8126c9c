{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/robertlark/SonicArchitecture/frontend/components/Checkout.js\";\nimport styled from \"styled-components\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { CardElement, Elements, useElements, useStripe } from \"@stripe/react-stripe-js\";\nimport { useState } from \"react\";\nimport nProgress from \"nprogress\";\nimport SickButton from \"./styles/SickButton\";\nimport gql from \"graphql-tag\";\nimport { useMutation } from \"@apollo/client\";\nimport { useRouter } from \"next/dist/client/router\";\nimport { useCart } from \"../lib/cartState\";\nconst CheckoutFormStyles = styled.form.withConfig({\n  displayName: \"Checkout__CheckoutFormStyles\",\n  componentId: \"sc-10mtoy5-0\"\n})([\"box-shadow:0 1px 2px 2px rgba(0,0,0,0.04);border:1px solid rgba(0,0,0,0.06);border-radius:5px;padding:1rem;display:grid;grid-gap:1rem;\"]);\nconst CREATE_ORDER_MUTATION = gql`\n  mutation CREATE_ORDER_MUTATION($token: String!) {\n    checkout(token: $token) {\n      id\n      charge\n      total\n      items {\n        id\n        name\n      }\n    }\n  }\n`;\nconst stripeLib = loadStripe(process.env.NEXT_PUBLIC_STRIPE_KEY);\n\nfunction CheckoutForm() {\n  const {\n    0: error,\n    1: setError\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const stripe = useStripe();\n  const {\n    closeCart\n  } = useCart();\n  const elements = useElements();\n  const router = useRouter();\n  const [checkout, {\n    error: graphQLError\n  }] = useMutation(CREATE_ORDER_MUTATION);\n\n  async function handleSubmit(e) {\n    // 1. Stop the form from submitting and turn the loader one\n    e.preventDefault();\n    setLoading(true); // 2. Start the page transition\n\n    nProgress.start(); // 3. Create the payment method via stripe (Token comes back here if successful)\n\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: \"card\",\n      card: elements.getElement(CardElement)\n    });\n    console.log(paymentMethod); // 4. Handle any errors from stripe\n\n    if (error) {\n      setError(error);\n      nProgress.done();\n      return; // stops checkout from happening if an error occurs\n    } // 5. Send the token from step 3 to our keystone server, via a custom mutation!\n\n\n    const order = await checkout({\n      variables: {\n        token: paymentMethod.id\n      }\n    });\n    console.log(`Finished with the order!!`);\n    console.log(order); // 6. Change the page to view the order\n\n    router.push({\n      pathname: '/order',\n      query: {\n        id: order.data.checkout.id\n      }\n    }); // 7. Close the cart\n\n    closeCart(); // 8. turn the loader off\n\n    setLoading(false);\n    nProgress.done();\n  }\n\n  return /*#__PURE__*/_jsxDEV(CheckoutFormStyles, {\n    onSubmit: handleSubmit,\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontSize: 12\n      },\n      children: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }, this), graphQLError && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontSize: 12\n      },\n      children: graphQLError.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SickButton, {\n      children: \"Check Out Now\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n\nfunction Checkout() {\n  return /*#__PURE__*/_jsxDEV(Elements, {\n    stripe: stripeLib,\n    children: /*#__PURE__*/_jsxDEV(CheckoutForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n\nexport { Checkout };","map":{"version":3,"sources":["/Users/robertlark/SonicArchitecture/frontend/components/Checkout.js"],"names":["styled","loadStripe","CardElement","Elements","useElements","useStripe","useState","nProgress","SickButton","gql","useMutation","useRouter","useCart","CheckoutFormStyles","form","CREATE_ORDER_MUTATION","stripeLib","process","env","NEXT_PUBLIC_STRIPE_KEY","CheckoutForm","error","setError","loading","setLoading","stripe","closeCart","elements","router","checkout","graphQLError","handleSubmit","e","preventDefault","start","paymentMethod","createPaymentMethod","type","card","getElement","console","log","done","order","variables","token","id","push","pathname","query","data","fontSize","message","Checkout"],"mappings":"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","sourcesContent":["import styled from \"styled-components\";\nimport {loadStripe} from \"@stripe/stripe-js\";\nimport {\n  CardElement,\n  Elements,\n  useElements,\n  useStripe,\n} from \"@stripe/react-stripe-js\";\nimport {useState} from \"react\";\nimport nProgress from \"nprogress\";\nimport SickButton from \"./styles/SickButton\";\nimport gql from \"graphql-tag\";\nimport {useMutation} from \"@apollo/client\";\nimport { useRouter } from \"next/dist/client/router\";\nimport { useCart } from \"../lib/cartState\";\n\nconst CheckoutFormStyles = styled.form`\n  box-shadow: 0 1px 2px 2px rgba(0, 0, 0, 0.04);\n  border: 1px solid rgba(0, 0, 0, 0.06);\n  border-radius: 5px;\n  padding: 1rem;\n  display: grid;\n  grid-gap: 1rem;\n`;\n\nconst CREATE_ORDER_MUTATION = gql`\n  mutation CREATE_ORDER_MUTATION($token: String!) {\n    checkout(token: $token) {\n      id\n      charge\n      total\n      items {\n        id\n        name\n      }\n    }\n  }\n`;\n\nconst stripeLib = loadStripe(process.env.NEXT_PUBLIC_STRIPE_KEY);\n\nfunction CheckoutForm() {\n  const [error, setError] = useState();\n  const [loading, setLoading] = useState(false);\n  const stripe = useStripe();\n  const {closeCart} = useCart()\n  const elements = useElements();\n  const router = useRouter();\n  const [checkout, { error: graphQLError }] = useMutation(\n    CREATE_ORDER_MUTATION,\n    \n  );\n  async function handleSubmit(e) {\n    // 1. Stop the form from submitting and turn the loader one\n    e.preventDefault();\n    setLoading(true);\n    // 2. Start the page transition\n    nProgress.start();\n    // 3. Create the payment method via stripe (Token comes back here if successful)\n    const {error, paymentMethod} = await stripe.createPaymentMethod({\n      type: \"card\",\n      card: elements.getElement(CardElement),\n    });\n    console.log(paymentMethod);\n    // 4. Handle any errors from stripe\n    if (error) {\n      setError(error);\n      nProgress.done()\n      return; // stops checkout from happening if an error occurs\n    }\n    // 5. Send the token from step 3 to our keystone server, via a custom mutation!\n    const order = await checkout({\n      variables: {\n        token: paymentMethod.id,\n      },\n    });\n    console.log(`Finished with the order!!`);\n    console.log(order);\n    // 6. Change the page to view the order\nrouter.push ({\n  pathname: '/order',\n  query: {id: order.data.checkout.id}\n})\n    // 7. Close the cart\ncloseCart();\n    // 8. turn the loader off\n    setLoading(false);\n    nProgress.done();\n  }\n\n  return (\n    <CheckoutFormStyles onSubmit={handleSubmit}>\n      {error && <p style={{fontSize: 12}}>{error.message}</p>}\n      {graphQLError && <p style={{fontSize: 12}}>{graphQLError.message}</p>}\n      \n      <CardElement />\n      <SickButton>Check Out Now</SickButton>\n    </CheckoutFormStyles>\n  );\n}\n\nfunction Checkout() {\n  return (\n    <Elements stripe={stripeLib}>\n      <CheckoutForm />\n    </Elements>\n  );\n}\n\nexport {Checkout};\n"]},"metadata":{},"sourceType":"module"}