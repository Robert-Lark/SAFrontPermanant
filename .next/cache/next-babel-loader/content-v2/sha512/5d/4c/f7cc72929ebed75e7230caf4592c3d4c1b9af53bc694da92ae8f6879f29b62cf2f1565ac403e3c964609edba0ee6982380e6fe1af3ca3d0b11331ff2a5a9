{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/robertlark/SonicArchitecture/frontend/lib/cartState.js\";\nimport { createContext, useState } from \"react\";\nimport { useContext } from \"react\";\nconst LocalStateContext = /*#__PURE__*/createContext();\nconst LocalStateProvider = LocalStateContext.Provider;\n\nfunction CartStateProvider({\n  children\n}) {\n  //this is the custom provider where data (state) is stored as well as functionality (updaters)\n  // it can be accessed using the consumer\n  //closed by default\n  const {\n    0: cartOpen,\n    1: setCartOpen\n  } = useState(false);\n\n  function toggleCart() {\n    setCartOpen(!cartOpen);\n  }\n\n  function closeCart() {\n    setCartOpen(false);\n  }\n\n  function openCart() {\n    setCartOpen(true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(LocalStateProvider, {\n    value: {\n      cartOpen,\n      setCartOpen,\n      toggleCart,\n      closeCart,\n      openCart\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n} //this is the custom hook for accessing the cart's local state\n\n\nfunction useCart() {\n  // we use a consumer here to access the local state\n  const all = useContext(LocalStateContext);\n  return all;\n}\n\nexport { CartStateProvider, useCart };","map":{"version":3,"sources":["/Users/robertlark/SonicArchitecture/frontend/lib/cartState.js"],"names":["createContext","useState","useContext","LocalStateContext","LocalStateProvider","Provider","CartStateProvider","children","cartOpen","setCartOpen","toggleCart","closeCart","openCart","useCart","all"],"mappings":";;AAAA,SAAQA,aAAR,EAAuBC,QAAvB,QAAsC,OAAtC;AACA,SAAQC,UAAR,QAAyB,OAAzB;AAEA,MAAMC,iBAAiB,gBAAGH,aAAa,EAAvC;AACA,MAAMI,kBAAkB,GAAGD,iBAAiB,CAACE,QAA7C;;AAEA,SAASC,iBAAT,CAA2B;AAACC,EAAAA;AAAD,CAA3B,EAAuC;AACrC;AACA;AACF;AACE,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0BR,QAAQ,CAAC,KAAD,CAAxC;;AAEA,WAASS,UAAT,GAAsB;AACpBD,IAAAA,WAAW,CAAC,CAACD,QAAF,CAAX;AACD;;AAED,WAASG,SAAT,GAAqB;AACnBF,IAAAA,WAAW,CAAC,KAAD,CAAX;AACD;;AAED,WAASG,QAAT,GAAoB;AAClBH,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AACD,sBACE,QAAC,kBAAD;AACE,IAAA,KAAK,EAAE;AAACD,MAAAA,QAAD;AAAWC,MAAAA,WAAX;AAAwBC,MAAAA,UAAxB;AAAoCC,MAAAA,SAApC;AAA+CC,MAAAA;AAA/C,KADT;AAAA,cAGGL;AAHH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,C,CAED;;;AAEA,SAASM,OAAT,GAAmB;AACjB;AACA,QAAMC,GAAG,GAAGZ,UAAU,CAACC,iBAAD,CAAtB;AACA,SAAOW,GAAP;AACD;;AACD,SAAQR,iBAAR,EAA2BO,OAA3B","sourcesContent":["import {createContext, useState} from \"react\";\nimport {useContext} from \"react\";\n\nconst LocalStateContext = createContext();\nconst LocalStateProvider = LocalStateContext.Provider;\n\nfunction CartStateProvider({children}) {\n  //this is the custom provider where data (state) is stored as well as functionality (updaters)\n  // it can be accessed using the consumer\n//closed by default\n  const [cartOpen, setCartOpen] = useState(false);\n\n  function toggleCart() {\n    setCartOpen(!cartOpen);\n  }\n\n  function closeCart() {\n    setCartOpen(false);\n  }\n\n  function openCart() {\n    setCartOpen(true);\n  }\n  return (\n    <LocalStateProvider\n      value={{cartOpen, setCartOpen, toggleCart, closeCart, openCart}}\n    >\n      {children}\n    </LocalStateProvider>\n  );\n}\n\n//this is the custom hook for accessing the cart's local state\n\nfunction useCart() {\n  // we use a consumer here to access the local state\n  const all = useContext(LocalStateContext);\n  return all;\n}\nexport {CartStateProvider, useCart};\n"]},"metadata":{},"sourceType":"module"}