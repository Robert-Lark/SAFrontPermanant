{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/robertlark/SonicArchitecture/frontend/pages/order/[id].js\";\n// this will catch the specific route of the order [id] is a\n// placeholder for the order id\nimport { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport next from \"next\";\nimport ErrorMessage from \"../../components/ErrorMessage\";\nimport OrderStyles from \"../../components/styles/OrderStyles\";\nimport Head from \"next/head\";\nconst SINGLE_ORDER_QUERY = gql`\n  query SINGLE_ORDER_QUERY($id: ID!) {\n    order: Order(where: {id: $id}) {\n      id\n      charge\n      total\n      user {\n        id\n      }\n      items {\n        id\n        name\n        description\n        price\n        quantity\n        photo {\n          image {\n            publicUrlTransformed\n          }\n        }\n      }\n    }\n  }\n`;\nexport default function singleOrderPage({\n  query\n}) {\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(SINGLE_ORDER_QUERY, {\n    variables: {\n      id: query.id\n    }\n  });\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n    error: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 21\n  }, this);\n  const {\n    order\n  } = data;\n  return /*#__PURE__*/_jsxDEV(OrderStyles, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Sonic Architecture\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Order Id          \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 10\n  }, this);\n}","map":{"version":3,"sources":["/Users/robertlark/SonicArchitecture/frontend/pages/order/[id].js"],"names":["useQuery","gql","next","ErrorMessage","OrderStyles","Head","SINGLE_ORDER_QUERY","singleOrderPage","query","data","error","loading","variables","id","order"],"mappings":";;AAAA;AACA;AAEA,SAAQA,QAAR,QAAuB,gBAAvB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,WAAP,MAAwB,qCAAxB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,MAAMC,kBAAkB,GAAGL,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAvBA;AAyBA,eAAe,SAASM,eAAT,CAAyB;AAACC,EAAAA;AAAD,CAAzB,EAAkC;AAC/C,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA,KAAP;AAAcC,IAAAA;AAAd,MAAyBX,QAAQ,CAACM,kBAAD,EAAqB;AAC1DM,IAAAA,SAAS,EAAE;AAACC,MAAAA,EAAE,EAAEL,KAAK,CAACK;AAAX;AAD+C,GAArB,CAAvC;AAGA,MAAIF,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAID,KAAJ,EAAW,oBAAO,QAAC,YAAD;AAAc,IAAA,KAAK,EAAEA;AAArB;AAAA;AAAA;AAAA;AAAA,UAAP;AACX,QAAM;AAACI,IAAAA;AAAD,MAAUL,IAAhB;AACA,sBAAO,QAAC,WAAD;AAAA,4BACH,QAAC,IAAD;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADG,eAIH;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAJG;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAQD","sourcesContent":["// this will catch the specific route of the order [id] is a\n// placeholder for the order id\n\nimport {useQuery} from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport next from \"next\";\nimport ErrorMessage from \"../../components/ErrorMessage\";\nimport OrderStyles from \"../../components/styles/OrderStyles\";\nimport Head from \"next/head\";\nconst SINGLE_ORDER_QUERY = gql`\n  query SINGLE_ORDER_QUERY($id: ID!) {\n    order: Order(where: {id: $id}) {\n      id\n      charge\n      total\n      user {\n        id\n      }\n      items {\n        id\n        name\n        description\n        price\n        quantity\n        photo {\n          image {\n            publicUrlTransformed\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function singleOrderPage({query}) {\n  const {data, error, loading} = useQuery(SINGLE_ORDER_QUERY, {\n    variables: {id: query.id},\n  });\n  if (loading) return <p>Loading...</p>;\n  if (error) return <ErrorMessage error={error} />;\n  const {order} = data;\n  return <OrderStyles>\n      <Head>\n          <title>Sonic Architecture</title>\n      </Head>\n      <p>\n          <span>Order Id          </span>\n      </p>\n      </OrderStyles>;\n}\n"]},"metadata":{},"sourceType":"module"}