{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/robertlark/SonicArchitecture/frontend/components/Search.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { resetIdCounter, useCombobox } from \"downshift\";\nimport debounce from \"lodash.debounce\";\nimport { DropDown, DropDownItem, SearchStyles } from \"./styles/DropDown\";\nimport gql from \"graphql-tag\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { useRouter } from \"next/dist/client/router\";\nconst SEARCH_PRODUCTS_QUERY = gql`\n  query SEARCH_PRODUCTS_QUERY($searchTerm: String!) {\n    # if ever you want to rename what comes back (by default it will be called data)\n    # you can prepend a title to the returned data like I did below\n    searchTerms: allProducts(\n      where: {\n        OR: [\n          {name_contains_i: $searchTerm}\n          {description_contains_i: $searchTerm}\n        ]\n      }\n    ) {\n      id\n      name\n      photo {\n        image {\n          publicUrlTransformed\n        }\n      }\n    }\n  }\n`;\nexport default function Search() {\n  const router = useRouter();\n  const [findItems, {\n    loading,\n    data,\n    error\n  }] = useLazyQuery(SEARCH_PRODUCTS_QUERY, {\n    // this by-passes the cache (as we don't want to store any of these results)\n    // it just goes directly to the network.\n    fetchPolicy: \"no-cache\"\n  });\n  const items = (data === null || data === void 0 ? void 0 : data.searchTerms) || []; //   this function ensures that a network request isnt fired for every keystroke but rather once every 350ms\n  // the 350ms resets with each keystroke\n\n  const findItemsAfterPause = debounce(findItems, 350); // resetId counter prevents errors on the console that talk about mismatched aria id tags from\n  // from downshift\n\n  resetIdCounter(); // comboBox is a package that handles accessability when it comes to search bars\n  // Below we are destructuring the particular pieces of combobox we want to use\n\n  const {\n    isOpen,\n    inputValue,\n    getMenuProps,\n    getInputProps,\n    getComboboxProps,\n    getItemProps,\n    highlightedIndex\n  } = useCombobox({\n    items,\n\n    // then we declare the methods we want to use onInputValueChange dictates wht to do when the\n    // search bar is typed into.\n    onInputValueChange() {\n      //   this function ensures that a network request isnt fired for every keystroke but rather once every 350ms\n      findItemsAfterPause({\n        variables: {\n          searchTerm: inputValue\n        }\n      });\n    },\n\n    onSelectedItemChange({\n      selectedItem\n    }) {\n      console.log(\"selected item changed\");\n      router.push({\n        pathname: `/product`\n      });\n    }\n\n  });\n  return /*#__PURE__*/_jsxDEV(SearchStyles, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({}, getComboboxProps()), {}, {\n      children: /*#__PURE__*/_jsxDEV(\"input\", _objectSpread({}, getInputProps({\n        type: \"search\",\n        placeholder: \"Search for a title\",\n        id: \"search\",\n        className: loading ? \"loading\" : \"\"\n      })), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DropDown, _objectSpread(_objectSpread({}, getMenuProps()), {}, {\n      children: [isOpen && items.map((item, index) => /*#__PURE__*/_jsxDEV(DropDownItem, _objectSpread(_objectSpread({}, getItemProps({\n        item\n      })), {}, {\n        highlighted: index === highlightedIndex,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: item.photo.image.publicUrlTransformed,\n          alt: item.name,\n          width: \"50px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this), item.name]\n      }), item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)), isOpen && !items.length && !loading && /*#__PURE__*/_jsxDEV(DropDownItem, {\n        children: [\"Sorry, No items found for \", inputValue]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }, this)]\n    }), void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/robertlark/SonicArchitecture/frontend/components/Search.js"],"names":["resetIdCounter","useCombobox","debounce","DropDown","DropDownItem","SearchStyles","gql","useLazyQuery","useRouter","SEARCH_PRODUCTS_QUERY","Search","router","findItems","loading","data","error","fetchPolicy","items","searchTerms","findItemsAfterPause","isOpen","inputValue","getMenuProps","getInputProps","getComboboxProps","getItemProps","highlightedIndex","onInputValueChange","variables","searchTerm","onSelectedItemChange","selectedItem","console","log","push","pathname","type","placeholder","id","className","map","item","index","photo","image","publicUrlTransformed","name","length"],"mappings":"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","sourcesContent":["import {resetIdCounter, useCombobox} from \"downshift\";\nimport debounce from \"lodash.debounce\";\nimport {DropDown, DropDownItem, SearchStyles} from \"./styles/DropDown\";\nimport gql from \"graphql-tag\";\nimport {useLazyQuery} from \"@apollo/client\";\nimport { useRouter } from \"next/dist/client/router\";\n\nconst SEARCH_PRODUCTS_QUERY = gql`\n  query SEARCH_PRODUCTS_QUERY($searchTerm: String!) {\n    # if ever you want to rename what comes back (by default it will be called data)\n    # you can prepend a title to the returned data like I did below\n    searchTerms: allProducts(\n      where: {\n        OR: [\n          {name_contains_i: $searchTerm}\n          {description_contains_i: $searchTerm}\n        ]\n      }\n    ) {\n      id\n      name\n      photo {\n        image {\n          publicUrlTransformed\n        }\n      }\n    }\n  }\n`;\n\nexport default function Search() {\n    const router = useRouter()\n  const [findItems, {loading, data, error}] = useLazyQuery(\n    SEARCH_PRODUCTS_QUERY,\n    {\n      // this by-passes the cache (as we don't want to store any of these results)\n      // it just goes directly to the network.\n      fetchPolicy: \"no-cache\",\n    }\n  );\n  const items = data?.searchTerms || [];\n  //   this function ensures that a network request isnt fired for every keystroke but rather once every 350ms\n  // the 350ms resets with each keystroke\n  const findItemsAfterPause = debounce(findItems, 350);\n  // resetId counter prevents errors on the console that talk about mismatched aria id tags from\n  // from downshift\n  resetIdCounter();\n\n  // comboBox is a package that handles accessability when it comes to search bars\n  // Below we are destructuring the particular pieces of combobox we want to use\n  const {\n    isOpen,\n    inputValue,\n    getMenuProps,\n    getInputProps,\n    getComboboxProps,\n    getItemProps,\n    highlightedIndex,\n  } = useCombobox({\n    items,\n    // then we declare the methods we want to use onInputValueChange dictates wht to do when the\n    // search bar is typed into.\n    onInputValueChange() {\n      //   this function ensures that a network request isnt fired for every keystroke but rather once every 350ms\n      findItemsAfterPause({\n        variables: {\n          searchTerm: inputValue,\n        },\n      });\n    },\n    onSelectedItemChange({ selectedItem }) {\n      console.log(\"selected item changed\");\nrouter.push({\n    pathname: `/product`\n})\n    },\n  });\n  return (\n    <SearchStyles>\n      <div {...getComboboxProps()}>\n        <input\n          {...getInputProps({\n            type: \"search\",\n            placeholder: \"Search for a title\",\n            id: \"search\",\n            className: loading ? \"loading\" : \"\",\n          })}\n        />\n      </div>\n      {/* here is where the returned data from the search query is rendered */}\n      <DropDown {...getMenuProps()}>\n        {isOpen && items.map((item, index) => (\n          <DropDownItem\n            key={item.id}\n            {...getItemProps({item})}\n            highlighted={index === highlightedIndex}\n          >\n            <img\n              src={item.photo.image.publicUrlTransformed}\n              alt={item.name}\n              width=\"50px\"\n            />\n            {item.name}\n          </DropDownItem>\n        ))}\n        {isOpen && !items.length && !loading && (\n            <DropDownItem>Sorry, No items found for {inputValue}</DropDownItem>\n        )}\n      </DropDown>\n    </SearchStyles>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}