{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/robertlark/SonicArchitecture/frontend/pages/order/[id].js\";\n// this will catch the specific route of the order [id] is a\n// placeholder for the order id\nimport gql from \"graphql-tag\";\nimport ErrorMessage from '../../components/ErrorMessage';\nconst SINGLE_ORDER_QUERY = gql`\nquery SINGLE_ORDER_QUERY($id: ID!) {\n    order: Order(where: { id: $id}) {\n        id\n        charge\n        total\n        user {\n            id\n        }\n        items {\n            id\n            name\n            description\n            price\n            quantity\n            photo {\n                image {\n                    publicUrlTranformed\n                }\n            }\n        }\n    }: \n}\n`;\nexport default function singleOrderPage({\n  query\n}) {\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(SINGLE_ORDER_QUERY, {\n    variables: {\n      id: query.id\n    }\n  });\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 24\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(ErrorMessage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 22\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"hey \", query.id]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 10\n  }, this);\n}","map":{"version":3,"sources":["/Users/robertlark/SonicArchitecture/frontend/pages/order/[id].js"],"names":["gql","ErrorMessage","SINGLE_ORDER_QUERY","singleOrderPage","query","data","error","loading","useQuery","variables","id"],"mappings":";;AAAA;AACA;AAEA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AAEA,MAAMC,kBAAkB,GAAGF,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAvBA;AAyBA,eAAe,SAASG,eAAT,CAAyB;AAACC,EAAAA;AAAD,CAAzB,EAAkC;AAC7C,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA,KAAP;AAAcC,IAAAA;AAAd,MAAyBC,QAAQ,CAACN,kBAAD,EAAqB;AACxDO,IAAAA,SAAS,EAAE;AAACC,MAAAA,EAAE,EAAEN,KAAK,CAACM;AAAX;AAD6C,GAArB,CAAvC;AAGA,MAAGH,OAAH,EAAY,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACZ,MAAGD,KAAH,EAAU,oBAAO,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AACZ,sBAAO;AAAA,uBAAUF,KAAK,CAACM,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD","sourcesContent":["// this will catch the specific route of the order [id] is a\n// placeholder for the order id\n\nimport gql from \"graphql-tag\";\nimport ErrorMessage from '../../components/ErrorMessage'\n\nconst SINGLE_ORDER_QUERY = gql`\nquery SINGLE_ORDER_QUERY($id: ID!) {\n    order: Order(where: { id: $id}) {\n        id\n        charge\n        total\n        user {\n            id\n        }\n        items {\n            id\n            name\n            description\n            price\n            quantity\n            photo {\n                image {\n                    publicUrlTranformed\n                }\n            }\n        }\n    }: \n}\n`\n\nexport default function singleOrderPage({query}) {\n    const {data, error, loading} = useQuery(SINGLE_ORDER_QUERY, {\n        variables: {id: query.id},\n    });\n    if(loading) return <p>Loading...</p>\n    if(error) return <ErrorMessage></ErrorMessage>\n  return <div>hey {query.id}</div>;\n}\n"]},"metadata":{},"sourceType":"module"}