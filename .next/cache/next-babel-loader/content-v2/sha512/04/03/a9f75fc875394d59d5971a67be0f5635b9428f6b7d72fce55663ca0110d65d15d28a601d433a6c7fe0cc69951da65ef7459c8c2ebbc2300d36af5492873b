{"ast":null,"code":"import _defineProperty from \"/Users/robertlark/SonicArchitecture/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/Users/robertlark/SonicArchitecture/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/robertlark/SonicArchitecture/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/Users/robertlark/SonicArchitecture/frontend/components/Search.js\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query SEARCH_PRODUCTS_QUERY($searchTerm: String!) {\\n    # if ever you want to rename what comes back (by default it will be called data)\\n    # you can prepend a title to the returned data like I did below\\n    searchTerms: allProducts(\\n      where: {\\n        OR: [\\n          {name_contains_i: $searchTerm}\\n          {description_contains_i: $searchTerm}\\n        ]\\n      }\\n    ) {\\n      id\\n      name\\n      photo {\\n        image {\\n          publicUrlTransformed\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { resetIdCounter, useCombobox } from \"downshift\";\nimport debounce from \"lodash.debounce\";\nimport { DropDown, DropDownItem, SearchStyles } from \"./styles/DropDown\";\nimport gql from \"graphql-tag\";\nimport { useLazyQuery } from \"@apollo/client\";\nvar SEARCH_PRODUCTS_QUERY = gql(_templateObject());\nexport default function Search() {\n  _s();\n\n  var _this = this;\n\n  var _useLazyQuery = useLazyQuery(SEARCH_PRODUCTS_QUERY, {\n    // this by-passes the cache (as we don't want to store any of these results)\n    // it just goes directly to the network.\n    fetchPolicy: \"no-cache\"\n  }),\n      _useLazyQuery2 = _slicedToArray(_useLazyQuery, 2),\n      findItems = _useLazyQuery2[0],\n      _useLazyQuery2$ = _useLazyQuery2[1],\n      loading = _useLazyQuery2$.loading,\n      data = _useLazyQuery2$.data,\n      error = _useLazyQuery2$.error;\n\n  var items = (data === null || data === void 0 ? void 0 : data.searchTerms) || []; //   this function ensures that a network request isnt fired for every keystroke but rather once every 350ms\n  // the 350ms resets with each keystroke\n\n  var findItemsAfterPause = debounce(findItems, 350); // resetId counter prevents errors on the console that talk about mismatched aria id tags from\n  // from downshift\n\n  resetIdCounter(); // comboBox is a package that handles accessability when it comes to search bars\n  // Below we are destructuring the particular pieces of combobox we want to use\n\n  var _useCombobox = useCombobox({\n    items: items,\n    // then we declare the methods we want to use onInputValueChange dictates wht to do when the\n    // search bar is typed into.\n    onInputValueChange: function onInputValueChange() {\n      //   this function ensures that a network request isnt fired for every keystroke but rather once every 350ms\n      findItemsAfterPause({\n        variables: {\n          searchTerm: inputValue\n        }\n      });\n    },\n    onSelectedItemChange: function onSelectedItemChange() {\n      console.log(\"selected item changed\");\n    }\n  }),\n      isOpen = _useCombobox.isOpen,\n      inputValue = _useCombobox.inputValue,\n      getMenuProps = _useCombobox.getMenuProps,\n      getInputProps = _useCombobox.getInputProps,\n      getComboboxProps = _useCombobox.getComboboxProps,\n      getItemProps = _useCombobox.getItemProps,\n      highlightedIndex = _useCombobox.highlightedIndex;\n\n  return /*#__PURE__*/_jsxDEV(SearchStyles, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({}, getComboboxProps()), {}, {\n      children: /*#__PURE__*/_jsxDEV(\"input\", _objectSpread({}, getInputProps({\n        type: \"search\",\n        placeholder: \"Search for a title\",\n        id: \"search\",\n        className: loading ? \"loading\" : \"\"\n      })), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DropDown, _objectSpread(_objectSpread({}, getMenuProps()), {}, {\n      children: [isOpen && items.map(function (item, index) {\n        return /*#__PURE__*/_jsxDEV(DropDownItem, _objectSpread(_objectSpread({}, getItemProps({\n          item: item\n        })), {}, {\n          highlighted: index === highlightedIndex,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: item.photo.image.publicUrlTransformed,\n            alt: item.name,\n            width: \"50px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, _this), item.name]\n        }), item.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, _this);\n      }), isOpen && !items.length && !loading && /*#__PURE__*/_jsxDEV(DropDownItem, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this)]\n    }), void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Search, \"rnDP5bstBJ/sLl3uYZgq99YMGoY=\", false, function () {\n  return [useLazyQuery, useCombobox];\n});\n\n_c = Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["/Users/robertlark/SonicArchitecture/frontend/components/Search.js"],"names":["resetIdCounter","useCombobox","debounce","DropDown","DropDownItem","SearchStyles","gql","useLazyQuery","SEARCH_PRODUCTS_QUERY","Search","fetchPolicy","findItems","loading","data","error","items","searchTerms","findItemsAfterPause","onInputValueChange","variables","searchTerm","inputValue","onSelectedItemChange","console","log","isOpen","getMenuProps","getInputProps","getComboboxProps","getItemProps","highlightedIndex","type","placeholder","id","className","map","item","index","photo","image","publicUrlTransformed","name","length"],"mappings":"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","sourcesContent":["import {resetIdCounter, useCombobox} from \"downshift\";\nimport debounce from \"lodash.debounce\";\nimport {DropDown, DropDownItem, SearchStyles} from \"./styles/DropDown\";\nimport gql from \"graphql-tag\";\nimport {useLazyQuery} from \"@apollo/client\";\n\nconst SEARCH_PRODUCTS_QUERY = gql`\n  query SEARCH_PRODUCTS_QUERY($searchTerm: String!) {\n    # if ever you want to rename what comes back (by default it will be called data)\n    # you can prepend a title to the returned data like I did below\n    searchTerms: allProducts(\n      where: {\n        OR: [\n          {name_contains_i: $searchTerm}\n          {description_contains_i: $searchTerm}\n        ]\n      }\n    ) {\n      id\n      name\n      photo {\n        image {\n          publicUrlTransformed\n        }\n      }\n    }\n  }\n`;\n\nexport default function Search() {\n  const [findItems, {loading, data, error}] = useLazyQuery(\n    SEARCH_PRODUCTS_QUERY,\n    {\n      // this by-passes the cache (as we don't want to store any of these results)\n      // it just goes directly to the network.\n      fetchPolicy: \"no-cache\",\n    }\n  );\n  const items = data?.searchTerms || [];\n  //   this function ensures that a network request isnt fired for every keystroke but rather once every 350ms\n  // the 350ms resets with each keystroke\n  const findItemsAfterPause = debounce(findItems, 350);\n  // resetId counter prevents errors on the console that talk about mismatched aria id tags from\n  // from downshift\n  resetIdCounter();\n\n  // comboBox is a package that handles accessability when it comes to search bars\n  // Below we are destructuring the particular pieces of combobox we want to use\n  const {\n    isOpen,\n    inputValue,\n    getMenuProps,\n    getInputProps,\n    getComboboxProps,\n    getItemProps,\n    highlightedIndex,\n  } = useCombobox({\n    items,\n    // then we declare the methods we want to use onInputValueChange dictates wht to do when the\n    // search bar is typed into.\n    onInputValueChange() {\n      //   this function ensures that a network request isnt fired for every keystroke but rather once every 350ms\n      findItemsAfterPause({\n        variables: {\n          searchTerm: inputValue,\n        },\n      });\n    },\n    onSelectedItemChange() {\n      console.log(\"selected item changed\");\n    },\n  });\n  return (\n    <SearchStyles>\n      <div {...getComboboxProps()}>\n        <input\n          {...getInputProps({\n            type: \"search\",\n            placeholder: \"Search for a title\",\n            id: \"search\",\n            className: loading ? \"loading\" : \"\",\n          })}\n        />\n      </div>\n      {/* here is where the returned data from the search query is rendered */}\n      <DropDown {...getMenuProps()}>\n        {isOpen && items.map((item, index) => (\n          <DropDownItem\n            key={item.id}\n            {...getItemProps({item})}\n            highlighted={index === highlightedIndex}\n          >\n            <img\n              src={item.photo.image.publicUrlTransformed}\n              alt={item.name}\n              width=\"50px\"\n            />\n            {item.name}\n          </DropDownItem>\n        ))}\n        {isOpen && !items.length && !loading && (\n            <DropDownItem></DropDownItem>\n        )}\n      </DropDown>\n    </SearchStyles>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}