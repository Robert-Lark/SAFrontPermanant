{"ast":null,"code":"// //This page allows you to remove items from the cache without messing up the pagination\n// import {PAGINATION_QUERY} from \"../components/Pagination\";\n// export default function paginationField() {\n//   return {\n//     keyArgs: false, //tells Apollo we will take care of everything\n//     read(existing = [], {args, cache}) {\n//       const {skip, first} = args;\n//       //read the number of items on the page from the cache\n//       const data = cache.readQuery({query: PAGINATION_QUERY});\n//       //how many products are there?\n//       const count = data?._allProductsMeta?.count;\n//       //what page are we on?\n//       const page = skip / first + 1;\n//       //how many pages are there?\n//       const pages = Math.ceil(count / first);\n//       //check if we have existing items\n//       //filter out for undefined items\n//       const items = existing.slice(skip, skip + first).filter((x) => x);\n//       if (items.length && items.length !== first && page == pages) {\n//         //if there are items & there arent enough items to satisfy how many we are requesting to show per page\n//         //and we are on the last page\n//         //then just send it anyway\n//         return items;\n//       }\n//       if (items.length !== first) {\n//         //we dont have any items and must go to the network to fetch them\n//         return false;\n//       }\n//       //if there are items return them from the cache\n//       if (items.length) {\n//         return items;\n//       }\n//       return false; // fallback to network if either if statements dont run\n//     },\n//     merge(existing, incoming, {args}) {\n//       const {skip, first} = args;\n//       //This runs when Apollo client comes back from the network with our products\n//       // you can then define how they are added to the cache\n//       const merged = existing ? existing.slice(0) : [];\n//       for (let i = skip; i < skip + incoming.length; ++i) {\n//         merged[i] = incoming[i - skip];\n//       }\n//       return merged;\n//     },\n//   };\n// }\nimport { PAGINATION_QUERY } from '../components/Pagination';\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n\n    // tells apollo we will take care of everything\n    read(existing = [], {\n      args,\n      cache\n    }) {\n      var _data$_allProductsMet;\n\n      // console.log({ existing, args, cache });\n      const {\n        skip,\n        first\n      } = args; // Read the number of items on the page from the cache\n\n      const data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      const count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      const page = skip / first + 1;\n      const pages = Math.ceil(count / first); // Check if we have existing items\n\n      const items = existing.slice(skip, skip + first).filter(x => x); // If\n      // There are items\n      // AND there aren't enough items to satisfy how many were requested\n      // AND we are on the last page\n      // THEN JUST SEND IT\n\n      if (items.length && items.length !== first && page === pages) {\n        return items;\n      }\n\n      if (items.length !== first) {\n        // We don't have any items, we must go to the network to fetch them\n        return false;\n      } // If there are items, just reutrn them from the cache, and we don't need to go to the network\n\n\n      if (items.length) {\n        // console.log(\n        //   `There are ${items.length} items in the cache! Gonna send them to apollo`\n        // );\n        return items;\n      }\n\n      return false; // fallback to network\n      // First thing it does it asks the read function for those items.\n      // We can either do one of two things:\n      // First things we can do is return the items because they are already in the cache\n      // The other thing we can do is to return false from here, (network request)\n    },\n\n    merge(existing, incoming, {\n      args\n    }) {\n      const {\n        skip,\n        first\n      } = args; // This runs when the Apollo client comes back from the network with our product\n      // console.log(`MErging items from the network ${incoming.length}`);\n\n      const merged = existing ? existing.slice(0) : [];\n\n      for (let i = skip; i < skip + incoming.length; ++i) {\n        merged[i] = incoming[i - skip];\n      } // Finally we return the merged items from the cache,\n\n\n      return merged;\n    }\n\n  };\n}","map":{"version":3,"sources":["/Users/robertlark/SonicArchitecture/frontend/lib/paginationFields.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","skip","first","data","readQuery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","filter","x","length","merge","incoming","merged","i"],"mappings":"AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,SAASA,gBAAT,QAAiC,0BAAjC;AAEA,eAAe,SAASC,eAAT,GAA2B;AACxC,SAAO;AACLC,IAAAA,OAAO,EAAE,KADJ;;AACW;AAChBC,IAAAA,IAAI,CAACC,QAAQ,GAAG,EAAZ,EAAgB;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAhB,EAAiC;AAAA;;AACnC;AACA,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBH,IAAxB,CAFmC,CAInC;;AACA,YAAMI,IAAI,GAAGH,KAAK,CAACI,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEX;AAAT,OAAhB,CAAb;AACA,YAAMY,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC;AACA,YAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,YAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd,CARmC,CAUnC;;AACA,YAAMU,KAAK,GAAGd,QAAQ,CAACe,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA2CC,CAAD,IAAOA,CAAjD,CAAd,CAXmC,CAYnC;AACA;AACA;AACA;AACA;;AAEA,UAAIH,KAAK,CAACI,MAAN,IAAgBJ,KAAK,CAACI,MAAN,KAAiBd,KAAjC,IAA0CM,IAAI,KAAKC,KAAvD,EAA8D;AAC5D,eAAOG,KAAP;AACD;;AACD,UAAIA,KAAK,CAACI,MAAN,KAAiBd,KAArB,EAA4B;AAC1B;AACA,eAAO,KAAP;AACD,OAxBkC,CA0BnC;;;AACA,UAAIU,KAAK,CAACI,MAAV,EAAkB;AAChB;AACA;AACA;AACA,eAAOJ,KAAP;AACD;;AAED,aAAO,KAAP,CAlCmC,CAkCrB;AAEd;AACA;AACA;AACA;AACD,KA1CI;;AA2CLK,IAAAA,KAAK,CAACnB,QAAD,EAAWoB,QAAX,EAAqB;AAAEnB,MAAAA;AAAF,KAArB,EAA+B;AAClC,YAAM;AAAEE,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBH,IAAxB,CADkC,CAElC;AACA;;AACA,YAAMoB,MAAM,GAAGrB,QAAQ,GAAGA,QAAQ,CAACe,KAAT,CAAe,CAAf,CAAH,GAAuB,EAA9C;;AACA,WAAK,IAAIO,CAAC,GAAGnB,IAAb,EAAmBmB,CAAC,GAAGnB,IAAI,GAAGiB,QAAQ,CAACF,MAAvC,EAA+C,EAAEI,CAAjD,EAAoD;AAClDD,QAAAA,MAAM,CAACC,CAAD,CAAN,GAAYF,QAAQ,CAACE,CAAC,GAAGnB,IAAL,CAApB;AACD,OAPiC,CASlC;;;AACA,aAAOkB,MAAP;AACD;;AAtDI,GAAP;AAwDD","sourcesContent":["// //This page allows you to remove items from the cache without messing up the pagination\n\n// import {PAGINATION_QUERY} from \"../components/Pagination\";\n\n// export default function paginationField() {\n//   return {\n//     keyArgs: false, //tells Apollo we will take care of everything\n\n//     read(existing = [], {args, cache}) {\n//       const {skip, first} = args;\n\n//       //read the number of items on the page from the cache\n//       const data = cache.readQuery({query: PAGINATION_QUERY});\n//       //how many products are there?\n//       const count = data?._allProductsMeta?.count;\n//       //what page are we on?\n//       const page = skip / first + 1;\n//       //how many pages are there?\n//       const pages = Math.ceil(count / first);\n\n//       //check if we have existing items\n//       //filter out for undefined items\n//       const items = existing.slice(skip, skip + first).filter((x) => x);\n\n//       if (items.length && items.length !== first && page == pages) {\n//         //if there are items & there arent enough items to satisfy how many we are requesting to show per page\n//         //and we are on the last page\n//         //then just send it anyway\n//         return items;\n//       }\n//       if (items.length !== first) {\n//         //we dont have any items and must go to the network to fetch them\n//         return false;\n//       }\n//       //if there are items return them from the cache\n//       if (items.length) {\n//         return items;\n//       }\n//       return false; // fallback to network if either if statements dont run\n//     },\n//     merge(existing, incoming, {args}) {\n//       const {skip, first} = args;\n//       //This runs when Apollo client comes back from the network with our products\n//       // you can then define how they are added to the cache\n//       const merged = existing ? existing.slice(0) : [];\n//       for (let i = skip; i < skip + incoming.length; ++i) {\n//         merged[i] = incoming[i - skip];\n//       }\n//       return merged;\n//     },\n//   };\n// }\n\n\nimport { PAGINATION_QUERY } from '../components/Pagination';\n\nexport default function paginationField() {\n  return {\n    keyArgs: false, // tells apollo we will take care of everything\n    read(existing = [], { args, cache }) {\n      // console.log({ existing, args, cache });\n      const { skip, first } = args;\n\n      // Read the number of items on the page from the cache\n      const data = cache.readQuery({ query: PAGINATION_QUERY });\n      const count = data?._allProductsMeta?.count;\n      const page = skip / first + 1;\n      const pages = Math.ceil(count / first);\n\n      // Check if we have existing items\n      const items = existing.slice(skip, skip + first).filter((x) => x);\n      // If\n      // There are items\n      // AND there aren't enough items to satisfy how many were requested\n      // AND we are on the last page\n      // THEN JUST SEND IT\n\n      if (items.length && items.length !== first && page === pages) {\n        return items;\n      }\n      if (items.length !== first) {\n        // We don't have any items, we must go to the network to fetch them\n        return false;\n      }\n\n      // If there are items, just reutrn them from the cache, and we don't need to go to the network\n      if (items.length) {\n        // console.log(\n        //   `There are ${items.length} items in the cache! Gonna send them to apollo`\n        // );\n        return items;\n      }\n\n      return false; // fallback to network\n\n      // First thing it does it asks the read function for those items.\n      // We can either do one of two things:\n      // First things we can do is return the items because they are already in the cache\n      // The other thing we can do is to return false from here, (network request)\n    },\n    merge(existing, incoming, { args }) {\n      const { skip, first } = args;\n      // This runs when the Apollo client comes back from the network with our product\n      // console.log(`MErging items from the network ${incoming.length}`);\n      const merged = existing ? existing.slice(0) : [];\n      for (let i = skip; i < skip + incoming.length; ++i) {\n        merged[i] = incoming[i - skip];\n      }\n\n      // Finally we return the merged items from the cache,\n      return merged;\n    },\n  };\n}"]},"metadata":{},"sourceType":"module"}