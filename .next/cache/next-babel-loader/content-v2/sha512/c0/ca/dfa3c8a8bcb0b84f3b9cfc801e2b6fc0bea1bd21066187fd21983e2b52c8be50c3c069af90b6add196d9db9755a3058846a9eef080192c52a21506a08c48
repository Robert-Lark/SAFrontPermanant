{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _taggedTemplateLiteral from \"/Users/robertlark/SonicArchitecture/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/Users/robertlark/SonicArchitecture/frontend/pages/order/[id].js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query SINGLE_ORDER_QUERY($id: ID!) {\\n        order: Order(where: { id: $id}) {\\n            id\\n            charge\\n            total\\n            user {\\n                id\\n            }\\n            items {\\n                id\\n                name\\n                description\\n                price\\n                quantity\\n                photo {\\n                    image {\\n                        publicUrlTransformed\\n                    }\\n                }\\n            }\\n        } \\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n// this will catch the specific route of the order [id] is a\n// placeholder for the order id\nimport { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport next from \"next\";\nimport ErrorMessage from \"../../components/ErrorMessage\";\nimport OrderStyles from '../../components/styles/OrderStyles';\nimport Head from 'next/Head';\nvar SINGLE_ORDER_QUERY = gql(_templateObject());\nexport default function singleOrderPage(_ref) {\n  _s();\n\n  var query = _ref.query;\n\n  var _useQuery = useQuery(SINGLE_ORDER_QUERY, {\n    variables: {\n      id: query.id\n    }\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading;\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n    error: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 21\n  }, this);\n  var order = data.order;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"hey \", order.id]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 10\n  }, this);\n}\n\n_s(singleOrderPage, \"Z+0LgrSWpTZsLds+tjQq9+67f1U=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/Users/robertlark/SonicArchitecture/frontend/pages/order/[id].js"],"names":["useQuery","gql","next","ErrorMessage","OrderStyles","Head","SINGLE_ORDER_QUERY","singleOrderPage","query","variables","id","data","error","loading","order"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AAEA,SAASA,QAAT,QAAyB,gBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,WAAP,MAAwB,qCAAxB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,IAAMC,kBAAkB,GAAGL,GAAH,mBAAxB;AAyBA,eAAe,SAASM,eAAT,OAAkC;AAAA;;AAAA,MAARC,KAAQ,QAARA,KAAQ;;AAAA,kBAChBR,QAAQ,CAACM,kBAAD,EAAqB;AAC1DG,IAAAA,SAAS,EAAE;AAACC,MAAAA,EAAE,EAAEF,KAAK,CAACE;AAAX;AAD+C,GAArB,CADQ;AAAA,MACxCC,IADwC,aACxCA,IADwC;AAAA,MAClCC,KADkC,aAClCA,KADkC;AAAA,MAC3BC,OAD2B,aAC3BA,OAD2B;;AAI/C,MAAIA,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAID,KAAJ,EAAW,oBAAO,QAAC,YAAD;AAAc,IAAA,KAAK,EAAEA;AAArB;AAAA;AAAA;AAAA;AAAA,UAAP;AALoC,MAMxCE,KANwC,GAM/BH,IAN+B,CAMxCG,KANwC;AAO/C,sBAAO;AAAA,uBAAUA,KAAK,CAACJ,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GARuBH,e;UACSP,Q","sourcesContent":["// this will catch the specific route of the order [id] is a\n// placeholder for the order id\n\nimport { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport next from \"next\";\nimport ErrorMessage from \"../../components/ErrorMessage\";\nimport OrderStyles from '../../components/styles/OrderStyles'\nimport Head from 'next/Head'\nconst SINGLE_ORDER_QUERY = gql`\n    query SINGLE_ORDER_QUERY($id: ID!) {\n        order: Order(where: { id: $id}) {\n            id\n            charge\n            total\n            user {\n                id\n            }\n            items {\n                id\n                name\n                description\n                price\n                quantity\n                photo {\n                    image {\n                        publicUrlTransformed\n                    }\n                }\n            }\n        } \n    }\n`;\n\nexport default function singleOrderPage({query}) {\n  const {data, error, loading} = useQuery(SINGLE_ORDER_QUERY, {\n    variables: {id: query.id},\n  });\n  if (loading) return <p>Loading...</p>;\n  if (error) return <ErrorMessage error={error} />;\n  const {order} = data;\n  return <div>hey {order.id}</div>;\n}\n"]},"metadata":{},"sourceType":"module"}