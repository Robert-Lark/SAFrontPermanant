{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/robertlark/SonicArchitecture/frontend/components/Search.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { resetIdCounter, useCombobox } from \"downshift\";\nimport debounce from \"lodash.debounce\";\nimport { DropDown, DropDownItem, SearchStyles } from \"./styles/DropDown\";\nimport gql from \"graphql-tag\";\nimport { useLazyQuery } from \"@apollo/client\";\nconst SEARCH_PRODUCTS_QUERY = gql`\n  query SEARCH_PRODUCTS_QUERY($searchTerm: String!) {\n    # if ever you want to rename what comes back (by default it will be called data)\n    # you can prepend a title to the returned data like I did below\n    searchTerms: allProducts(\n      where: {\n        OR: [\n          {name_contains_i: $searchTerm}\n          {description_contains_i: $searchTerm}\n        ]\n      }\n    ) {\n      id\n      name\n      photo {\n        image {\n          publicUrlTransformed\n        }\n      }\n    }\n  }\n`;\nexport default function Search() {\n  const [findItems, {\n    loading,\n    data,\n    error\n  }] = useLazyQuery(SEARCH_PRODUCTS_QUERY, {\n    // this by-passes the cache (as we don't want to store any of these results)\n    // it just goes directly to the network.\n    fetchPolicy: \"no-cache\"\n  });\n  const items = (data === null || data === void 0 ? void 0 : data.searchTerms) || []; //   this function ensures that a network request isnt fired for every keystroke but rather once every 350ms\n  // the 350ms resets with each keystroke\n\n  const findItemsAfterPause = debounce(findItems, 350); // resetId counter prevents errors on the console that talk about mismatched aria id tags from\n  // from downshift\n\n  resetIdCounter(); // comboBox is a package that handles accessability when it comes to search bars\n  // Below we are destructuring the particular pieces of combobox we want to use\n\n  const {\n    inputValue,\n    getMenuProps,\n    getInputProps,\n    getComboboxProps\n  } = useCombobox({\n    items: [],\n\n    // then we declare the methods we want to use onInputValueChange dictates wht to do when the\n    // search bar is typed into.\n    onInputValueChange() {\n      //   this function ensures that a network request isnt fired for every keystroke but rather once every 350ms\n      findItemsAfterPause({\n        variables: {\n          searchTerm: inputValue\n        }\n      });\n    },\n\n    onSelectedItemChange() {\n      console.log(\"selected item changed\");\n    }\n\n  });\n  return /*#__PURE__*/_jsxDEV(SearchStyles, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({}, getComboboxProps()), {}, {\n      children: /*#__PURE__*/_jsxDEV(\"input\", _objectSpread({}, getInputProps({\n        type: \"search\",\n        placeholder: \"Search for a title\",\n        id: \"search\",\n        className: loading ? \"loading\" : \"\"\n      })), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DropDown, _objectSpread(_objectSpread({}, getMenuProps()), {}, {\n      children: items.map(item => /*#__PURE__*/_jsxDEV(DropDownItem, {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: item.photo.img,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 15\n        }, this), item.name]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this))\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/robertlark/SonicArchitecture/frontend/components/Search.js"],"names":["resetIdCounter","useCombobox","debounce","DropDown","DropDownItem","SearchStyles","gql","useLazyQuery","SEARCH_PRODUCTS_QUERY","Search","findItems","loading","data","error","fetchPolicy","items","searchTerms","findItemsAfterPause","inputValue","getMenuProps","getInputProps","getComboboxProps","onInputValueChange","variables","searchTerm","onSelectedItemChange","console","log","type","placeholder","id","className","map","item","photo","img","name"],"mappings":";;;;;;;;;AAAA,SAAQA,cAAR,EAAwBC,WAAxB,QAA0C,WAA1C;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,SAAQC,QAAR,EAAkBC,YAAlB,EAAgCC,YAAhC,QAAmD,mBAAnD;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAAQC,YAAR,QAA2B,gBAA3B;AAEA,MAAMC,qBAAqB,GAAGF,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CArBA;AAuBA,eAAe,SAASG,MAAT,GAAkB;AAC/B,QAAM,CAACC,SAAD,EAAY;AAACC,IAAAA,OAAD;AAAUC,IAAAA,IAAV;AAAgBC,IAAAA;AAAhB,GAAZ,IAAsCN,YAAY,CACtDC,qBADsD,EAEtD;AACE;AACA;AACAM,IAAAA,WAAW,EAAE;AAHf,GAFsD,CAAxD;AAQA,QAAMC,KAAK,GAAG,CAAAH,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEI,WAAN,KAAqB,EAAnC,CAT+B,CAU/B;AACA;;AACA,QAAMC,mBAAmB,GAAGf,QAAQ,CAACQ,SAAD,EAAY,GAAZ,CAApC,CAZ+B,CAa/B;AACA;;AACAV,EAAAA,cAAc,GAfiB,CAiB/B;AACA;;AACA,QAAM;AACJkB,IAAAA,UADI;AAEJC,IAAAA,YAFI;AAGJC,IAAAA,aAHI;AAIJC,IAAAA;AAJI,MAKFpB,WAAW,CAAC;AACdc,IAAAA,KAAK,EAAE,EADO;;AAEd;AACA;AACAO,IAAAA,kBAAkB,GAAG;AACnB;AACAL,MAAAA,mBAAmB,CAAC;AAClBM,QAAAA,SAAS,EAAE;AACTC,UAAAA,UAAU,EAAEN;AADH;AADO,OAAD,CAAnB;AAKD,KAXa;;AAYdO,IAAAA,oBAAoB,GAAG;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACD;;AAda,GAAD,CALf;AAqBA,sBACE,QAAC,YAAD;AAAA,4BACE,+CAASN,gBAAgB,EAAzB;AAAA,6BACE,mCACMD,aAAa,CAAC;AAChBQ,QAAAA,IAAI,EAAE,QADU;AAEhBC,QAAAA,WAAW,EAAE,oBAFG;AAGhBC,QAAAA,EAAE,EAAE,QAHY;AAIhBC,QAAAA,SAAS,EAAEpB,OAAO,GAAG,SAAH,GAAe;AAJjB,OAAD,CADnB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAYE,QAAC,QAAD,kCAAcQ,YAAY,EAA1B;AAAA,gBACGJ,KAAK,CAACiB,GAAN,CAAWC,IAAD,iBACT,QAAC,YAAD;AAAA,gCACI;AAAK,UAAA,GAAG,EAAEA,IAAI,CAACC,KAAL,CAAWC,GAArB;AAA0B,UAAA,GAAG,EAAC;AAA9B;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEKF,IAAI,CAACG,IAFV;AAAA,SAAmBH,IAAI,CAACH,EAAxB;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD","sourcesContent":["import {resetIdCounter, useCombobox} from \"downshift\";\nimport debounce from \"lodash.debounce\";\nimport {DropDown, DropDownItem, SearchStyles} from \"./styles/DropDown\";\nimport gql from \"graphql-tag\";\nimport {useLazyQuery} from \"@apollo/client\";\n\nconst SEARCH_PRODUCTS_QUERY = gql`\n  query SEARCH_PRODUCTS_QUERY($searchTerm: String!) {\n    # if ever you want to rename what comes back (by default it will be called data)\n    # you can prepend a title to the returned data like I did below\n    searchTerms: allProducts(\n      where: {\n        OR: [\n          {name_contains_i: $searchTerm}\n          {description_contains_i: $searchTerm}\n        ]\n      }\n    ) {\n      id\n      name\n      photo {\n        image {\n          publicUrlTransformed\n        }\n      }\n    }\n  }\n`;\n\nexport default function Search() {\n  const [findItems, {loading, data, error}] = useLazyQuery(\n    SEARCH_PRODUCTS_QUERY,\n    {\n      // this by-passes the cache (as we don't want to store any of these results)\n      // it just goes directly to the network.\n      fetchPolicy: \"no-cache\",\n    }\n  );\n  const items = data?.searchTerms || [];\n  //   this function ensures that a network request isnt fired for every keystroke but rather once every 350ms\n  // the 350ms resets with each keystroke\n  const findItemsAfterPause = debounce(findItems, 350);\n  // resetId counter prevents errors on the console that talk about mismatched aria id tags from\n  // from downshift\n  resetIdCounter();\n\n  // comboBox is a package that handles accessability when it comes to search bars\n  // Below we are destructuring the particular pieces of combobox we want to use\n  const {\n    inputValue,\n    getMenuProps,\n    getInputProps,\n    getComboboxProps,\n  } = useCombobox({\n    items: [],\n    // then we declare the methods we want to use onInputValueChange dictates wht to do when the\n    // search bar is typed into.\n    onInputValueChange() {\n      //   this function ensures that a network request isnt fired for every keystroke but rather once every 350ms\n      findItemsAfterPause({\n        variables: {\n          searchTerm: inputValue,\n        },\n      });\n    },\n    onSelectedItemChange() {\n      console.log(\"selected item changed\");\n    },\n  });\n  return (\n    <SearchStyles>\n      <div {...getComboboxProps()}>\n        <input\n          {...getInputProps({\n            type: \"search\",\n            placeholder: \"Search for a title\",\n            id: \"search\",\n            className: loading ? \"loading\" : \"\",\n          })}\n        />\n      </div>\n      {/* here is where the returned data from the search query is rendered */}\n      <DropDown {...getMenuProps()}>\n        {items.map((item) => (\n          <DropDownItem key={item.id}>\n              <img src={item.photo.img} alt=\"\"/>\n              {item.name}</DropDownItem>\n        ))}\n      </DropDown>\n    </SearchStyles>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}