{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/robertlark/SonicArchitecture/frontend/components/Search.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { resetIdCounter, useCombobox } from \"downshift\";\nimport { DropDown, DropDownItem, SearchStyles } from \"./styles/DropDown\";\nconst SEARCH_PRODUCTS_QUERY = gql`\nquery SEARCH_PRODUCTS_QUERY($searchTerm:String!) {\n    # if ever you want to rename what comes back (by default it will be called data)\n    # you can prepend a title to the returned data like I did below\n    searchTerms: allProducts(\n        where: {\n            OR: [\n                { name_contains_i: $searchTerm},\n                { description_contains_i: $searchTerm},\n                ]\n        }\n    ) {\n        id\n        classNamephoto {\n            image {\n                publicUrlTransformed\n            }\n        }\n    }\n}\n`;\nexport default function Search() {\n  const [findItems, {\n    loading,\n    data,\n    error\n  }] = useLazyQuery(SEARCH_PRODUCTS_QUERY, {\n    // this by-passes the cache (as we don't want to store any of these results)\n    // it just goes directly to the network. \n    fetchPolicy: 'no-cache'\n  }); // resetId counter prevents errors on the console that talk about mismatched \n\n  resetIdCounter();\n  const {\n    getMenuProps,\n    getInputProps,\n    getComboboxProps\n  } = useCombobox({\n    items: [],\n\n    onInputValueChange() {\n      console.log(\"input changed\");\n    },\n\n    onSelectedItemChange() {\n      console.log(\"selected item changed\");\n    }\n\n  });\n  return /*#__PURE__*/_jsxDEV(SearchStyles, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({}, getComboboxProps()), {}, {\n      children: /*#__PURE__*/_jsxDEV(\"input\", _objectSpread({}, getInputProps({\n        type: \"search\",\n        placeholder: \"Search for a title\",\n        id: \"search\",\n        className: \"loading\"\n      })), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DropDown, _objectSpread(_objectSpread({}, getMenuProps()), {}, {\n      children: [/*#__PURE__*/_jsxDEV(DropDownItem, {\n        children: \" Hey \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DropDownItem, {\n        children: \" Hello \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DropDownItem, {\n        children: \" Hi \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }), void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/robertlark/SonicArchitecture/frontend/components/Search.js"],"names":["resetIdCounter","useCombobox","DropDown","DropDownItem","SearchStyles","SEARCH_PRODUCTS_QUERY","gql","Search","findItems","loading","data","error","useLazyQuery","fetchPolicy","getMenuProps","getInputProps","getComboboxProps","items","onInputValueChange","console","log","onSelectedItemChange","type","placeholder","id","className"],"mappings":";;;;;;;;;AAAA,SAAQA,cAAR,EAAwBC,WAAxB,QAA0C,WAA1C;AACA,SAAQC,QAAR,EAAkBC,YAAlB,EAAgCC,YAAhC,QAAmD,mBAAnD;AAGA,MAAMC,qBAAqB,GAAGC,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CApBA;AAuBA,eAAe,SAASC,MAAT,GAAkB;AAC7B,QAAM,CAACC,SAAD,EAAY;AAACC,IAAAA,OAAD;AAAUC,IAAAA,IAAV;AAAgBC,IAAAA;AAAhB,GAAZ,IAAsCC,YAAY,CAACP,qBAAD,EAAwB;AAC5E;AACA;AACAQ,IAAAA,WAAW,EAAE;AAH+D,GAAxB,CAAxD,CAD6B,CAM7B;;AACFb,EAAAA,cAAc;AACd,QAAM;AAACc,IAAAA,YAAD;AAAeC,IAAAA,aAAf;AAA8BC,IAAAA;AAA9B,MAAkDf,WAAW,CAAC;AAClEgB,IAAAA,KAAK,EAAE,EAD2D;;AAElEC,IAAAA,kBAAkB,GAAG;AACnBC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD,KAJiE;;AAKlEC,IAAAA,oBAAoB,GAAG;AACrBF,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACD;;AAPiE,GAAD,CAAnE;AASA,sBACE,QAAC,YAAD;AAAA,4BACE,+CAASJ,gBAAgB,EAAzB;AAAA,6BACE,mCACMD,aAAa,CAAC;AAChBO,QAAAA,IAAI,EAAE,QADU;AAEhBC,QAAAA,WAAW,EAAE,oBAFG;AAGhBC,QAAAA,EAAE,EAAE,QAHY;AAIhBC,QAAAA,SAAS,EAAE;AAJK,OAAD,CADnB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAWE,QAAC,QAAD,kCAAcX,YAAY,EAA1B;AAAA,8BACE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD","sourcesContent":["import {resetIdCounter, useCombobox} from \"downshift\";\nimport {DropDown, DropDownItem, SearchStyles} from \"./styles/DropDown\";\n\n\nconst SEARCH_PRODUCTS_QUERY = gql`\nquery SEARCH_PRODUCTS_QUERY($searchTerm:String!) {\n    # if ever you want to rename what comes back (by default it will be called data)\n    # you can prepend a title to the returned data like I did below\n    searchTerms: allProducts(\n        where: {\n            OR: [\n                { name_contains_i: $searchTerm},\n                { description_contains_i: $searchTerm},\n                ]\n        }\n    ) {\n        id\n        classNamephoto {\n            image {\n                publicUrlTransformed\n            }\n        }\n    }\n}\n`\n\n\nexport default function Search() {\n    const [findItems, {loading, data, error}] = useLazyQuery(SEARCH_PRODUCTS_QUERY, {\n        // this by-passes the cache (as we don't want to store any of these results)\n        // it just goes directly to the network. \n        fetchPolicy: 'no-cache',\n    })\n    // resetId counter prevents errors on the console that talk about mismatched \n  resetIdCounter();\n  const {getMenuProps, getInputProps, getComboboxProps} = useCombobox({\n    items: [],\n    onInputValueChange() {\n      console.log(\"input changed\");\n    },\n    onSelectedItemChange() {\n      console.log(\"selected item changed\");\n    },\n  });\n  return (\n    <SearchStyles>\n      <div {...getComboboxProps()}>\n        <input\n          {...getInputProps({\n            type: \"search\",\n            placeholder: \"Search for a title\",\n            id: \"search\",\n            className: \"loading\",\n          })}\n        />\n      </div>\n      <DropDown {...getMenuProps()}>\n        <DropDownItem> Hey </DropDownItem>\n        <DropDownItem> Hello </DropDownItem>\n        <DropDownItem> Hi </DropDownItem>\n      </DropDown>\n    </SearchStyles>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}