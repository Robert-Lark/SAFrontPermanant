{"ast":null,"code":"// import {useState, useEffect} from \"react\";\n// export default function useForm(initial = {}) {\n//   //create a state object for the inputs\n//   const [inputs, setInputs] = useState(initial);\n//   const initialValues = Object.values(initial).join(\"\");\n//   useEffect(() => {\n//     //This function runs when the things we are monitoring changes\n//     setInputs(initial);\n//   }, [initialValues]);\n//   function handleChange(e) {\n//     let {value, name, type} = e.target;\n//     //this stops the html input from reverting from\n//     //a number to a string on change\n//     if (type === \"number\") {\n//       value = parseInt(value);\n//     }\n//     if (type === \"file\") {\n//       [value] = e.target.files;\n//     }\n//     setInputs({\n//       //copy the existing state\n//       ...inputs,\n//       //update the specific piece of state\n//       [name]: value,\n//     });\n//   }\n//   //revert the form back to initial state\n//   function resetForm() {\n//     setInputs(initial);\n//   }\n//   //clear all of the form values\n//   function clearForm() {\n//     const blankState = Object.fromEntries(\n//       Object.entries(inputs).map(([key, value]) => [key, \"\"])\n//     );\n//     setInputs(blankState);\n//   }\n//   //return the data we want to surface from this custom hook\n//   return {\n//     inputs,\n//     handleChange,\n//     resetForm,\n//     clearForm,\n//   };\n// }","map":{"version":3,"sources":["/Users/robertlark/SonicArchitecture/Advanced-React/sick-fits/frontend/lib/useForm.js"],"names":[],"mappings":"AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import {useState, useEffect} from \"react\";\n\n// export default function useForm(initial = {}) {\n//   //create a state object for the inputs\n//   const [inputs, setInputs] = useState(initial);\n  \n//   const initialValues = Object.values(initial).join(\"\");\n//   useEffect(() => {\n//     //This function runs when the things we are monitoring changes\n//     setInputs(initial);\n//   }, [initialValues]);\n\n//   function handleChange(e) {\n//     let {value, name, type} = e.target;\n//     //this stops the html input from reverting from\n//     //a number to a string on change\n//     if (type === \"number\") {\n//       value = parseInt(value);\n//     }\n//     if (type === \"file\") {\n//       [value] = e.target.files;\n//     }\n//     setInputs({\n//       //copy the existing state\n//       ...inputs,\n//       //update the specific piece of state\n//       [name]: value,\n//     });\n//   }\n//   //revert the form back to initial state\n//   function resetForm() {\n//     setInputs(initial);\n//   }\n//   //clear all of the form values\n//   function clearForm() {\n//     const blankState = Object.fromEntries(\n//       Object.entries(inputs).map(([key, value]) => [key, \"\"])\n//     );\n//     setInputs(blankState);\n//   }\n//   //return the data we want to surface from this custom hook\n//   return {\n//     inputs,\n//     handleChange,\n//     resetForm,\n//     clearForm,\n//   };\n// }\n"]},"metadata":{},"sourceType":"script"}