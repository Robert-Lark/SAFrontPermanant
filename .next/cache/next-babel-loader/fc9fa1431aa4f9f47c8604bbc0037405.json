{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from \"react\";\nexport default function useForm(initialState = {}) {\n  //create a state object for the inputs\n  const {\n    0: inputs,\n    1: setInputs\n  } = useState(initialState);\n  useEffect(() => {});\n\n  function handleChange(e) {\n    let {\n      value,\n      name,\n      type\n    } = e.target; //this stops the html input from reverting from \n    //a number to a string on change\n\n    if (type === 'number') {\n      value = parseInt(value);\n    }\n\n    if (type === 'file') {\n      [value] = e.target.files;\n    }\n\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, {\n      //update the specific piece of state\n      [name]: value\n    }));\n  } //revert the form back to initial state\n\n\n  function resetForm() {\n    setInputs(initialState);\n  } //clear all of the form values\n\n\n  function clearForm() {\n    const blankState = Object.fromEntries(Object.entries(inputs).map(([key, value]) => [key, '']));\n    setInputs(blankState);\n  } //return the data we want to surface from this custom hook\n\n\n  return {\n    inputs,\n    handleChange,\n    resetForm,\n    clearForm\n  };\n}","map":{"version":3,"sources":["/Users/robertlark/SonicArchitecture/Advanced-React/sick-fits/frontend/lib/useForm.js"],"names":["useState","useForm","initialState","inputs","setInputs","useEffect","handleChange","e","value","name","type","target","parseInt","files","resetForm","clearForm","blankState","Object","fromEntries","entries","map","key"],"mappings":";;;;;;AAAA,SAAQA,QAAR,QAAuB,OAAvB;AAEA,eAAe,SAASC,OAAT,CAAiBC,YAAY,GAAG,EAAhC,EAAoC;AACjD;AACA,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBJ,QAAQ,CAACE,YAAD,CAApC;AAEFG,EAAAA,SAAS,CAAC,MAAM,CAEf,CAFQ,CAAT;;AAKE,WAASC,YAAT,CAAsBC,CAAtB,EAAyB;AACvB,QAAI;AAACC,MAAAA,KAAD;AAAQC,MAAAA,IAAR;AAAcC,MAAAA;AAAd,QAAsBH,CAAC,CAACI,MAA5B,CADuB,CAEvB;AACA;;AACA,QAAGD,IAAI,KAAK,QAAZ,EAAsB;AAClBF,MAAAA,KAAK,GAAGI,QAAQ,CAACJ,KAAD,CAAhB;AACH;;AACD,QAAGE,IAAI,KAAK,MAAZ,EAAoB;AAChB,OAACF,KAAD,IAAUD,CAAC,CAACI,MAAF,CAASE,KAAnB;AACH;;AACDT,IAAAA,SAAS,iCAEJD,MAFI;AAGP;AACA,OAACM,IAAD,GAAQD;AAJD,OAAT;AAMD,GAzBgD,CA0BjD;;;AACA,WAASM,SAAT,GAAqB;AACjBV,IAAAA,SAAS,CAACF,YAAD,CAAT;AACH,GA7BgD,CA8BnD;;;AACE,WAASa,SAAT,GAAqB;AACjB,UAAMC,UAAU,GAAGC,MAAM,CAACC,WAAP,CAAmBD,MAAM,CAACE,OAAP,CAAehB,MAAf,EAAuBiB,GAAvB,CAA2B,CAAC,CAACC,GAAD,EAAMb,KAAN,CAAD,KAAkB,CAACa,GAAD,EAAM,EAAN,CAA7C,CAAnB,CAAnB;AACAjB,IAAAA,SAAS,CAACY,UAAD,CAAT;AACH,GAlCgD,CAmCjD;;;AACA,SAAO;AACLb,IAAAA,MADK;AAELG,IAAAA,YAFK;AAGLQ,IAAAA,SAHK;AAILC,IAAAA;AAJK,GAAP;AAMD","sourcesContent":["import {useState} from \"react\";\n\nexport default function useForm(initialState = {}) {\n  //create a state object for the inputs\n  const [inputs, setInputs] = useState(initialState);\n\nuseEffect(() => {\n  \n} )\n\n\n  function handleChange(e) {\n    let {value, name, type} = e.target;\n    //this stops the html input from reverting from \n    //a number to a string on change\n    if(type === 'number') {\n        value = parseInt(value)\n    }\n    if(type === 'file') {\n        [value] = e.target.files;\n    }\n    setInputs({\n      //copy the existing state\n      ...inputs,\n      //update the specific piece of state\n      [name]: value,\n    });\n  }\n  //revert the form back to initial state\n  function resetForm() {\n      setInputs(initialState)\n  }\n//clear all of the form values\n  function clearForm() {\n      const blankState = Object.fromEntries(Object.entries(inputs).map(([key, value]) => [key, '']))\n      setInputs(blankState)\n  }\n  //return the data we want to surface from this custom hook\n  return {\n    inputs,\n    handleChange,\n    resetForm,\n    clearForm\n  };\n}\n"]},"metadata":{},"sourceType":"module"}