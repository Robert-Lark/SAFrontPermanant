{"ast":null,"code":"import _slicedToArray from \"/Users/robertlark/SonicArchitecture/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/robertlark/SonicArchitecture/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from \"react\";\nexport default function useForm() {\n  _s();\n\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  //create a state object for the inputs\n  var _useState = useState(initialState),\n      inputs = _useState[0],\n      setInputs = _useState[1];\n\n  function handleChange(e) {\n    var _e$target = e.target,\n        value = _e$target.value,\n        name = _e$target.name,\n        type = _e$target.type; //this stops the html input from reverting from \n    //a number to a string on change\n\n    if (type === 'number') {\n      value = parseInt(value);\n    }\n\n    if (type === 'file') {\n      value = e.target.files;\n    }\n\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, _defineProperty({}, name, value)));\n  } //revert the form back to initial state\n\n\n  function resetForm() {\n    setInputs(initialState);\n  } //clear all of the form values\n\n\n  function clearForm() {\n    var blankState = Object.fromEntries(Object.entries(inputs).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n\n      return [key, ''];\n    }));\n    setInputs(blankState);\n  } //return the data we want to surface from this custom hook\n\n\n  return {\n    inputs: inputs,\n    handleChange: handleChange,\n    resetForm: resetForm,\n    clearForm: clearForm\n  };\n}\n\n_s(useForm, \"Lv6RJ/mHpnMUo6xaiYRWB4w93So=\");","map":{"version":3,"sources":["/Users/robertlark/SonicArchitecture/Advanced-React/sick-fits/frontend/lib/useForm.js"],"names":["useState","useForm","initialState","inputs","setInputs","handleChange","e","target","value","name","type","parseInt","files","resetForm","clearForm","blankState","Object","fromEntries","entries","map","key"],"mappings":";;;;;;;;;AAAA,SAAQA,QAAR,QAAuB,OAAvB;AAEA,eAAe,SAASC,OAAT,GAAoC;AAAA;;AAAA,MAAnBC,YAAmB,uEAAJ,EAAI;;AACjD;AADiD,kBAErBF,QAAQ,CAACE,YAAD,CAFa;AAAA,MAE1CC,MAF0C;AAAA,MAElCC,SAFkC;;AAIjD,WAASC,YAAT,CAAsBC,CAAtB,EAAyB;AAAA,oBACGA,CAAC,CAACC,MADL;AAAA,QAClBC,KADkB,aAClBA,KADkB;AAAA,QACXC,IADW,aACXA,IADW;AAAA,QACLC,IADK,aACLA,IADK,EAEvB;AACA;;AACA,QAAGA,IAAI,KAAK,QAAZ,EAAsB;AAClBF,MAAAA,KAAK,GAAGG,QAAQ,CAACH,KAAD,CAAhB;AACH;;AACD,QAAGE,IAAI,KAAK,MAAZ,EAAoB;AAChBF,MAAAA,KAAK,GAAGF,CAAC,CAACC,MAAF,CAASK,KAAjB;AACH;;AACDR,IAAAA,SAAS,iCAEJD,MAFI,2BAINM,IAJM,EAICD,KAJD,GAAT;AAMD,GApBgD,CAqBjD;;;AACA,WAASK,SAAT,GAAqB;AACjBT,IAAAA,SAAS,CAACF,YAAD,CAAT;AACH,GAxBgD,CAyBnD;;;AACE,WAASY,SAAT,GAAqB;AACjB,QAAMC,UAAU,GAAGC,MAAM,CAACC,WAAP,CAAmBD,MAAM,CAACE,OAAP,CAAef,MAAf,EAAuBgB,GAAvB,CAA2B;AAAA;AAAA,UAAEC,GAAF;AAAA,UAAOZ,KAAP;;AAAA,aAAkB,CAACY,GAAD,EAAM,EAAN,CAAlB;AAAA,KAA3B,CAAnB,CAAnB;AACAhB,IAAAA,SAAS,CAACW,UAAD,CAAT;AACH,GA7BgD,CA8BjD;;;AACA,SAAO;AACLZ,IAAAA,MAAM,EAANA,MADK;AAELE,IAAAA,YAAY,EAAZA,YAFK;AAGLQ,IAAAA,SAAS,EAATA,SAHK;AAILC,IAAAA,SAAS,EAATA;AAJK,GAAP;AAMD;;GArCuBb,O","sourcesContent":["import {useState} from \"react\";\n\nexport default function useForm(initialState = {}) {\n  //create a state object for the inputs\n  const [inputs, setInputs] = useState(initialState);\n\n  function handleChange(e) {\n    let {value, name, type} = e.target;\n    //this stops the html input from reverting from \n    //a number to a string on change\n    if(type === 'number') {\n        value = parseInt(value)\n    }\n    if(type === 'file') {\n        value = e.target.files;\n    }\n    setInputs({\n      //copy the existing state\n      ...inputs,\n      //update the specific piece of state\n      [name]: value,\n    });\n  }\n  //revert the form back to initial state\n  function resetForm() {\n      setInputs(initialState)\n  }\n//clear all of the form values\n  function clearForm() {\n      const blankState = Object.fromEntries(Object.entries(inputs).map(([key, value]) => [key, '']))\n      setInputs(blankState)\n  }\n  //return the data we want to surface from this custom hook\n  return {\n    inputs,\n    handleChange,\n    resetForm,\n    clearForm\n  };\n}\n"]},"metadata":{},"sourceType":"module"}