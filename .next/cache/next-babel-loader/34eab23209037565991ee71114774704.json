{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/robertlark/SonicArchitecture/Advanced-React/sick-fits/frontend/components/UpdateProduct.js\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport Router from \"next/dist/next-server/server/router\";\nimport useForm from \"../lib/useForm\";\nimport DisplayError from \"./ErrorMessage\";\nimport Form from \"./styles/Form\";\nconst SINGLE_PRODUCT_QUERY = gql`\n  query SINGLE_PRODUCT_QUERY($id: ID!) {\n    Product(where: {id: $id}) {\n      id\n      name\n      description\n      price\n    }\n  }\n`;\nconst UPDATE_PRODUCT_MUTATION = gql`\n  mutation UPDATE_PRODUCT_MUTATION(\n    $id: ID!\n    $name: String\n    $description: String\n    $price: Int\n  ) {\n    updateProduct(\n      id: $id\n      data: {name: $name, description: $description, price: $price}\n    ) {\n      id\n      name\n      description\n      price\n    }\n  }\n`;\nexport default function UpdateProduct({\n  id\n}) {\n  // 1. We need to get the existing product\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(SINGLE_PRODUCT_QUERY, {\n    variables: {\n      id\n    }\n  }); // 2. We need to get the mutation to update the product\n\n  const [updateProduct, {\n    data: updateData,\n    errror: updateError,\n    loading: updateLoading\n  }] = useMutation(UPDATE_PRODUCT_MUTATION); //state for the form inputs\n\n  const {\n    inputs,\n    handleChange,\n    clearForm,\n    resetForm\n  } = useForm(data === null || data === void 0 ? void 0 : data.Product); //Here is the form to handle the updates\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: async e => {\n      e.preventDefault(); // Submit the inputfields to the backend:\n\n      const res = await updateProduct({\n        variables: {\n          id: id,\n          name: inputs.name,\n          description: inputs.description,\n          price: inputs.price\n        }\n      }).catch(console.error);\n      clearForm(); //then go to the products page\n\n      Router.push({\n        pathname: `/product/${res.data.createProduct.id}`\n      });\n    },\n    children: [/*#__PURE__*/_jsxDEV(DisplayError, {\n      error: error || updateError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      disabled: updateLoading,\n      \"aria-busy\": loading,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: [\"Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          name: \"name\",\n          placeholder: \"Name\",\n          value: inputs.name,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"price\",\n        children: [\"Price\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"price\",\n          name: \"price\",\n          placeholder: \"price\",\n          value: inputs.price,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"description\",\n        children: [\"Description\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"description\",\n          name: \"description\",\n          placeholder: \"Description\",\n          value: inputs.description,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Update Product\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/robertlark/SonicArchitecture/Advanced-React/sick-fits/frontend/components/UpdateProduct.js"],"names":["useMutation","useQuery","gql","Router","useForm","DisplayError","Form","SINGLE_PRODUCT_QUERY","UPDATE_PRODUCT_MUTATION","UpdateProduct","id","data","error","loading","variables","updateProduct","updateData","errror","updateError","updateLoading","inputs","handleChange","clearForm","resetForm","Product","e","preventDefault","res","name","description","price","catch","console","push","pathname","createProduct"],"mappings":"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","sourcesContent":["import {useMutation, useQuery} from \"@apollo/client\";\n\nimport gql from \"graphql-tag\";\nimport Router from \"next/dist/next-server/server/router\";\nimport useForm from \"../lib/useForm\";\nimport DisplayError from \"./ErrorMessage\";\nimport Form from \"./styles/Form\";\n\nconst SINGLE_PRODUCT_QUERY = gql`\n  query SINGLE_PRODUCT_QUERY($id: ID!) {\n    Product(where: {id: $id}) {\n      id\n      name\n      description\n      price\n    }\n  }\n`;\n\nconst UPDATE_PRODUCT_MUTATION = gql`\n  mutation UPDATE_PRODUCT_MUTATION(\n    $id: ID!\n    $name: String\n    $description: String\n    $price: Int\n  ) {\n    updateProduct(\n      id: $id\n      data: {name: $name, description: $description, price: $price}\n    ) {\n      id\n      name\n      description\n      price\n    }\n  }\n`;\n\nexport default function UpdateProduct({id}) {\n  // 1. We need to get the existing product\n  const {data, error, loading} = useQuery(SINGLE_PRODUCT_QUERY, {\n    variables: {id},\n  });\n  // 2. We need to get the mutation to update the product\n  const [\n    updateProduct,\n    {data: updateData, errror: updateError, loading: updateLoading},\n  ] = useMutation(UPDATE_PRODUCT_MUTATION);\n  //state for the form inputs\n\n  const {inputs, handleChange, clearForm, resetForm} = useForm(data?.Product);\n\n  //Here is the form to handle the updates\n  if (loading) return <p>Loading...</p>;\n  return (\n    <Form\n      onSubmit={async (e) => {\n        e.preventDefault();\n        // Submit the inputfields to the backend:\n        const res = await updateProduct({\n          variables: {\n            id: id,\n            name: inputs.name,\n            description: inputs.description,\n            price: inputs.price,\n          },\n        }).catch(console.error);\n        clearForm();\n        //then go to the products page\n        Router.push({\n          pathname: `/product/${res.data.createProduct.id}`,\n        });\n      }}\n    >\n      <DisplayError error={error || updateError} />\n      <fieldset disabled={updateLoading} aria-busy={loading}>\n        <label htmlFor=\"name\">\n          Name\n          <input\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            placeholder=\"Name\"\n            value={inputs.name}\n            onChange={handleChange}\n          />\n        </label>\n        <label htmlFor=\"price\">\n          Price\n          <input\n            type=\"number\"\n            id=\"price\"\n            name=\"price\"\n            placeholder=\"price\"\n            value={inputs.price}\n            onChange={handleChange}\n          />\n        </label>\n        <label htmlFor=\"description\">\n          Description\n          <textarea\n            id=\"description\"\n            name=\"description\"\n            placeholder=\"Description\"\n            value={inputs.description}\n            onChange={handleChange}\n          />\n        </label>\n        <button type=\"submit\">Update Product</button>\n      </fieldset>\n    </Form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}