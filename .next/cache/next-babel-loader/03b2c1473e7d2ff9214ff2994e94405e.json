{"ast":null,"code":"import { PAGINATION_QUERY } from \"../components/Pagination\";\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n    //tells Apollo we will take care of everything\n    read: function read() {\n      var _data$_allProductsMet;\n\n      var existing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var _ref = arguments.length > 1 ? arguments[1] : undefined,\n          args = _ref.args,\n          cache = _ref.cache;\n\n      var skip = args.skip,\n          first = args.first; //read the number of items on the page from the cache\n\n      var data = cache.readQuery({\n        query: PAGINATION_QUERY\n      }); //how many products are there?\n\n      var count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count; //what page are we on?\n\n      var page = skip / first + 1; //how many pages are there?\n\n      var pages = Math.ceil(count / first); //check if we have existing items\n      //filter out for undefined items\n\n      var items = existing.slice(skip, skip + first).filter(function (x) {\n        return x;\n      });\n      if (items.length && items.length !== first && page) if (items.length !== first) {\n        //we dont have any items and must go to the network to fetch them\n        return false;\n      } //if there are items return them from the cache\n\n      if (items.length) {\n        return items;\n      }\n\n      return false; // fallback to network if either if statements dont run\n    },\n    merge: function merge(existing, incoming, _ref2) {\n      var args = _ref2.args;\n      var skip = args.skip,\n          first = args.first; //This runs when Apollo client comes back from the network with our products\n      // you can then define how they are added to the cache\n\n      var merged = existing ? existing.slice(0) : [];\n\n      for (var i = skip; i < skip + incoming.length; ++i) {\n        merged[i] = incoming[i - skip];\n      }\n\n      return merged;\n    }\n  };\n}","map":{"version":3,"sources":["/Users/robertlark/SonicArchitecture/Advanced-React/sick-fits/frontend/lib/paginationFields.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","skip","first","data","readQuery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","filter","x","length","merge","incoming","merged","i"],"mappings":"AAAA,SAAQA,gBAAR,QAA+B,0BAA/B;AAEA,eAAe,SAASC,eAAT,GAA2B;AACxC,SAAO;AACLC,IAAAA,OAAO,EAAE,KADJ;AACW;AAEhBC,IAAAA,IAHK,kBAG8B;AAAA;;AAAA,UAA9BC,QAA8B,uEAAnB,EAAmB;;AAAA;AAAA,UAAdC,IAAc,QAAdA,IAAc;AAAA,UAARC,KAAQ,QAARA,KAAQ;;AAAA,UAC1BC,IAD0B,GACXF,IADW,CAC1BE,IAD0B;AAAA,UACpBC,KADoB,GACXH,IADW,CACpBG,KADoB,EAGjC;;AACA,UAAMC,IAAI,GAAGH,KAAK,CAACI,SAAN,CAAgB;AAACC,QAAAA,KAAK,EAAEX;AAAR,OAAhB,CAAb,CAJiC,CAKjC;;AACA,UAAMY,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC,CANiC,CAOjC;;AACA,UAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B,CARiC,CASjC;;AACA,UAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd,CAViC,CAYjC;AACA;;AACA,UAAMU,KAAK,GAAGd,QAAQ,CAACe,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA0C,UAACC,CAAD;AAAA,eAAOA,CAAP;AAAA,OAA1C,CAAd;AACA,UAAGH,KAAK,CAACI,MAAN,IAAgBJ,KAAK,CAACI,MAAN,KAAiBd,KAAjC,IAA0CM,IAA7C,EACA,IAAII,KAAK,CAACI,MAAN,KAAiBd,KAArB,EAA4B;AAC1B;AACA,eAAO,KAAP;AACD,OAnBgC,CAoBjC;;AACA,UAAIU,KAAK,CAACI,MAAV,EAAkB;AAChB,eAAOJ,KAAP;AACD;;AACD,aAAO,KAAP,CAxBiC,CAwBnB;AACf,KA5BI;AA6BLK,IAAAA,KA7BK,iBA6BCnB,QA7BD,EA6BWoB,QA7BX,SA6B6B;AAAA,UAAPnB,IAAO,SAAPA,IAAO;AAAA,UACzBE,IADyB,GACVF,IADU,CACzBE,IADyB;AAAA,UACnBC,KADmB,GACVH,IADU,CACnBG,KADmB,EAEhC;AACA;;AACA,UAAMiB,MAAM,GAAGrB,QAAQ,GAAGA,QAAQ,CAACe,KAAT,CAAe,CAAf,CAAH,GAAuB,EAA9C;;AACA,WAAK,IAAIO,CAAC,GAAGnB,IAAb,EAAmBmB,CAAC,GAAGnB,IAAI,GAAGiB,QAAQ,CAACF,MAAvC,EAA+C,EAAEI,CAAjD,EAAoD;AAClDD,QAAAA,MAAM,CAACC,CAAD,CAAN,GAAYF,QAAQ,CAACE,CAAC,GAAGnB,IAAL,CAApB;AACD;;AACD,aAAOkB,MAAP;AACD;AAtCI,GAAP;AAwCD","sourcesContent":["import {PAGINATION_QUERY} from \"../components/Pagination\";\n\nexport default function paginationField() {\n  return {\n    keyArgs: false, //tells Apollo we will take care of everything\n\n    read(existing = [], {args, cache}) {\n      const {skip, first} = args;\n\n      //read the number of items on the page from the cache\n      const data = cache.readQuery({query: PAGINATION_QUERY});\n      //how many products are there?\n      const count = data?._allProductsMeta?.count;\n      //what page are we on?\n      const page = skip / first + 1;\n      //how many pages are there?\n      const pages = Math.ceil(count / first);\n\n      //check if we have existing items\n      //filter out for undefined items\n      const items = existing.slice(skip, skip + first).filter((x) => x);\n      if(items.length && items.length !== first && page)\n      if (items.length !== first) {\n        //we dont have any items and must go to the network to fetch them\n        return false;\n      }\n      //if there are items return them from the cache\n      if (items.length) {\n        return items;\n      }\n      return false; // fallback to network if either if statements dont run\n    },\n    merge(existing, incoming, {args}) {\n      const {skip, first} = args;\n      //This runs when Apollo client comes back from the network with our products\n      // you can then define how they are added to the cache\n      const merged = existing ? existing.slice(0) : [];\n      for (let i = skip; i < skip + incoming.length; ++i) {\n        merged[i] = incoming[i - skip];\n      }\n      return merged;\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}